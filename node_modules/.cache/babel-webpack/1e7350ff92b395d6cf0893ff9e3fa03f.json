{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/dzubu/source/repos/LiveChat gui/LiveChatGui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { of } from 'rxjs';\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { environment } from 'src/environments/environment';\nimport { PrivateChatComponent } from '../components/private-chat/private-chat.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/dialog\";\nconst baseUrl = environment.baseUrl;\nexport class ChatService {\n  constructor(http, authService, router, dialog) {\n    this.http = http;\n    this.authService = authService;\n    this.router = router;\n    this.dialog = dialog;\n    this.onlineUsers = [];\n    this.messages = [];\n    this.privateMessages = [];\n    this.privateChatStarted = false;\n    this.token = \"\";\n    this.token = localStorage.getItem('token');\n  }\n\n  getAll() {\n    return this.http.get(baseUrl + \"/api/Message\", {\n      withCredentials: true\n    });\n  }\n\n  get(id) {\n    return of({\n      \"id\": 1,\n      \"data\": \"test\"\n    });\n  }\n\n  createChat() {\n    this.hubConnection = new HubConnectionBuilder().configureLogging(LogLevel.Debug).withUrl(baseUrl + \"/hubs\", {\n      withCredentials: true,\n      accessTokenFactory: () => this.token\n    }).withAutomaticReconnect().build();\n    this.hubConnection.start().catch(error => {\n      console.log(error);\n    });\n    this.hubConnection.on(\"Connected\", () => {\n      console.log(\"Connected !\");\n      this.addUserConnectionId();\n    });\n    this.hubConnection.on(\"OnlineUsers\", onlineUsers => {\n      console.log(\"Online Users !\");\n      this.onlineUsers = [...onlineUsers];\n    });\n    this.hubConnection.on(\"NewMessage\", message => {\n      console.log(\"New Message !\");\n      this.messages = [...this.messages, message];\n    });\n    this.hubConnection.on(\"OpenPrivateChat\", message => {\n      console.log(\"Open Private Chat !\");\n      this.privateMessages = [...this.privateMessages, message];\n      this.privateChatStarted = true;\n      this.openPrivateChat(message.user);\n    });\n    this.hubConnection.on(\"NewPrivateMessage\", message => {\n      console.log(\"New private message !\");\n      this.privateMessages = [...this.privateMessages, message];\n    });\n    this.hubConnection.on(\"ClosePrivateChat\", () => {\n      this.privateChatStarted = false;\n      this.privateMessages = [];\n    });\n  }\n\n  stopChat() {\n    this.hubConnection.stop().catch(error => {\n      console.log(error);\n    });\n  }\n\n  addUserConnectionId() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      return (_a = _this.hubConnection) === null || _a === void 0 ? void 0 : _a.invoke(\"AddUserConnectionId\", _this.authService.getUserName()).catch(error => {\n        console.log(error);\n      });\n    })();\n  }\n\n  sendMessage(text) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      var message = {\n        user: _this2.authService.getUserName(),\n        text: text,\n        dateTime: new Date().toLocaleDateString()\n      };\n      return (_a = _this2.hubConnection) === null || _a === void 0 ? void 0 : _a.invoke(\"ReceiveMessage\", message).catch(error => {\n        console.log(error);\n      });\n    })();\n  }\n\n  stopPrivateChat(otherUser) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      return (_a = _this3.hubConnection) === null || _a === void 0 ? void 0 : _a.invoke(\"RemovePrivateChat\", _this3.authService.getUserName(), otherUser).catch(error => {\n        console.log(error);\n      });\n    })();\n  }\n\n  sendPrivateMess(receiver, text) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n\n      var message = {\n        user: _this4.authService.getUserName(),\n        text: text,\n        dateTime: new Date().toLocaleDateString(),\n        receiver: receiver\n      };\n\n      if (_this4.privateChatStarted == false) {\n        _this4.privateChatStarted = true;\n        return (_a = _this4.hubConnection) === null || _a === void 0 ? void 0 : _a.invoke(\"CreatePrivateChat\", message).then(() => {\n          _this4.privateMessages = [..._this4.privateMessages, message];\n        }).catch(error => {\n          console.log(error);\n        });\n      } else {\n        return (_b = _this4.hubConnection) === null || _b === void 0 ? void 0 : _b.invoke(\"ReceivePrivate\", message).catch(error => {\n          console.log(error);\n        });\n      }\n    })();\n  }\n\n  logoutUser() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      return (_a = _this5.hubConnection) === null || _a === void 0 ? void 0 : _a.invoke(\"logoutUser\").catch(error => {\n        console.log(error);\n      });\n    })();\n  }\n\n  openPrivateChat(receiver) {\n    const dialogRef = this.dialog.open(PrivateChatComponent, {\n      width: '500px',\n      data: {\n        receiver: receiver\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n    });\n  }\n\n}\n\nChatService.ɵfac = function ChatService_Factory(t) {\n  return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.MatDialog));\n};\n\nChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatService,\n  factory: ChatService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\dzubu\\source\\repos\\LiveChat gui\\LiveChatGui\\src\\app\\services\\chat.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Chat } from '../models/chat.model';\r\nimport { HttpTransportType, HubConnection, HubConnectionBuilder, IHttpConnectionOptions, LogLevel } from '@microsoft/signalr';\r\nimport { AuthService } from './auth.service';\r\nimport { Message } from '../models/message.model';\r\nimport { Router } from '@angular/router';\r\nimport { environment } from 'src/environments/environment';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { PrivateChatComponent } from '../components/private-chat/private-chat.component';\r\n\r\nconst baseUrl = environment.baseUrl;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatService {\r\n  private hubConnection! : HubConnection;\r\n  onlineUsers : string[]=[];\r\n  messages: Message[]=[];\r\n  privateMessages: Message[]=[];\r\n  privateChatStarted: boolean = false;\r\n  token: any = \"\";\r\n\r\n  constructor(private http: HttpClient, private authService: AuthService, private router: Router, private dialog: MatDialog) {\r\n      this.token = localStorage.getItem('token');\r\n   }\r\n\r\n  getAll() {\r\n    return this.http.get(baseUrl+\"/api/Message\",{withCredentials:true});\r\n  }\r\n\r\n  get(id: any): Observable<Chat> {\r\n    return of({\r\n      \"id\":1,\r\n      \"data\":\"test\"\r\n    })\r\n  }\r\n\r\n  createChat(){\r\n    this.hubConnection = new HubConnectionBuilder().configureLogging(LogLevel.Debug).withUrl(baseUrl+\"/hubs\",{withCredentials:true,accessTokenFactory: () => this.token }).withAutomaticReconnect().build();\r\n    this.hubConnection.start().catch(error=>{console.log(error)});\r\n\r\n    this.hubConnection.on(\"Connected\", ()=>{\r\n      console.log(\"Connected !\");\r\n      this.addUserConnectionId();\r\n    });\r\n\r\n    this.hubConnection.on(\"OnlineUsers\", (onlineUsers)=>{\r\n      console.log(\"Online Users !\");\r\n      this.onlineUsers = [...onlineUsers];\r\n    });\r\n\r\n    this.hubConnection.on(\"NewMessage\", (message: Message)=>{\r\n      console.log(\"New Message !\");\r\n      this.messages = [...this.messages, message]\r\n    });\r\n\r\n    this.hubConnection.on(\"OpenPrivateChat\", (message: Message)=>{\r\n      console.log(\"Open Private Chat !\");\r\n      this.privateMessages = [...this.privateMessages, message];\r\n      this.privateChatStarted = true;\r\n      this.openPrivateChat(message.user);\r\n    });\r\n\r\n    this.hubConnection.on(\"NewPrivateMessage\", (message: Message)=>{\r\n      console.log(\"New private message !\");\r\n      this.privateMessages = [...this.privateMessages, message]\r\n    });\r\n\r\n    this.hubConnection.on(\"ClosePrivateChat\", ()=>{\r\n      this.privateChatStarted = false;\r\n      this.privateMessages=[];\r\n    });\r\n  }\r\n\r\n  stopChat(){\r\n    this.hubConnection.stop().catch(error=>{console.log(error)});\r\n  }\r\n  async addUserConnectionId(){\r\n    return this.hubConnection?.invoke(\"AddUserConnectionId\", this.authService.getUserName()).catch(error=>{\r\n      console.log(error);\r\n    })\r\n  }\r\n  async sendMessage(text: string){\r\n    var message: Message = {\r\n      user: this.authService.getUserName(),\r\n      text : text,\r\n      dateTime: new Date().toLocaleDateString()\r\n    }\r\n    return this.hubConnection?.invoke(\"ReceiveMessage\",message).catch(error=>{\r\n      console.log(error);\r\n    })\r\n  }\r\n  async stopPrivateChat(otherUser: string){\r\n    return this.hubConnection?.invoke(\"RemovePrivateChat\", this.authService.getUserName(), otherUser).catch(error=>{\r\n      console.log(error);\r\n    })\r\n  }\r\n  async sendPrivateMess(receiver: string, text: string){\r\n    var message: Message = {\r\n      user: this.authService.getUserName(),\r\n      text : text,\r\n      dateTime: new Date().toLocaleDateString(),\r\n      receiver: receiver\r\n    }\r\n    if(this.privateChatStarted==false){\r\n      this.privateChatStarted=true;\r\n    return this.hubConnection?.invoke(\"CreatePrivateChat\", message).then(()=>{\r\n\r\n      this.privateMessages=[...this.privateMessages, message];\r\n    }).catch(error=>{\r\n      console.log(error);\r\n    })\r\n  }else{\r\n    return this.hubConnection?.invoke(\"ReceivePrivate\", message).catch(error=>{\r\n      console.log(error);\r\n    })\r\n  }\r\n  }\r\n  async logoutUser(){\r\n    return this.hubConnection?.invoke(\"logoutUser\").catch(error=>{\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  openPrivateChat(receiver?: string){\r\n    const dialogRef = this.dialog.open(PrivateChatComponent, {\r\n      width: '500px',\r\n      data :{\r\n        receiver : receiver}\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      console.log('The dialog was closed');\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}