{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/dzubu/source/repos/LiveChat gui/LiveChatGui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { of } from 'rxjs';\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nconst baseUrl = 'http://localhost:5115';\nexport class ChatService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.onlineUsers = [];\n    this.messages = [];\n    this.privateMessages = [];\n  }\n\n  getAll() {\n    return this.http.get(baseUrl + \"/api/Message\", {\n      withCredentials: true\n    });\n  }\n\n  get(id) {\n    return of({\n      \"id\": 1,\n      \"data\": \"test\"\n    });\n  }\n\n  createChat() {\n    this.hubConnection = new HubConnectionBuilder().configureLogging(LogLevel.Debug).withUrl(baseUrl + \"/hubs\", {\n      withCredentials: true\n    }).withAutomaticReconnect().build();\n    this.hubConnection.start().catch(error => {\n      console.log(error);\n    });\n    this.hubConnection.on(\"Connected\", () => {\n      console.log(\"Connected !\");\n      this.addUserConnectionId();\n    });\n    this.hubConnection.on(\"OnlineUsers\", onlineUsers => {\n      console.log(\"Online Users !\");\n      this.onlineUsers = [...onlineUsers];\n    });\n    this.hubConnection.on(\"NewMessage\", message => {\n      console.log(\"New Message !\");\n      this.messages = [...this.messages, message];\n    });\n  }\n\n  stopChat() {\n    this.hubConnection.stop().catch(error => {\n      console.log(error);\n    });\n  }\n\n  addUserConnectionId() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      return (_a = _this.hubConnection) === null || _a === void 0 ? void 0 : _a.invoke(\"AddUserConnectionId\", _this.authService.getUserName()).catch(error => {\n        console.log(error);\n      });\n    })();\n  }\n\n  sendMessage(text) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      var message = {\n        user: _this2.authService.getUserName(),\n        text: text,\n        dateTime: new Date().toLocaleDateString()\n      };\n      return (_a = _this2.hubConnection) === null || _a === void 0 ? void 0 : _a.invoke(\"ReceiveMessage\", message).catch(error => {\n        console.log(error);\n      });\n    })();\n  }\n\n  stopPrivateChat(user) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      return (_a = _this3.hubConnection) === null || _a === void 0 ? void 0 : _a.invoke(\"RemovePrivateChat\", _this3.authService.getUserName()).catch(error => {\n        console.log(error);\n      });\n    })();\n  }\n\n}\n\nChatService.ɵfac = function ChatService_Factory(t) {\n  return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n};\n\nChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatService,\n  factory: ChatService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\dzubu\\source\\repos\\LiveChat gui\\LiveChatGui\\src\\app\\services\\chat.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Chat } from '../models/chat.model';\r\nimport { HttpTransportType, HubConnection, HubConnectionBuilder, IHttpConnectionOptions, LogLevel } from '@microsoft/signalr';\r\nimport { AuthService } from './auth.service';\r\nimport { Message } from '../models/message.model';\r\n\r\nconst baseUrl = 'http://localhost:5115';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatService {\r\n  private hubConnection! : HubConnection;\r\n  onlineUsers : string[]=[];\r\n  messages: Message[]=[];\r\n  privateMessages: Message[]=[];\r\n\r\n  constructor(private http: HttpClient, private authService: AuthService) { }\r\n\r\n  getAll() {\r\n    return this.http.get(baseUrl+\"/api/Message\",{withCredentials:true});\r\n  }\r\n\r\n  get(id: any): Observable<Chat> {\r\n    return of({\r\n      \"id\":1,\r\n      \"data\":\"test\"\r\n    })\r\n  }\r\n\r\n  createChat(){\r\n    this.hubConnection = new HubConnectionBuilder().configureLogging(LogLevel.Debug).withUrl(baseUrl+\"/hubs\",{withCredentials:true}).withAutomaticReconnect().build();\r\n    this.hubConnection.start().catch(error=>{console.log(error)});\r\n\r\n    this.hubConnection.on(\"Connected\", ()=>{\r\n      console.log(\"Connected !\");\r\n      this.addUserConnectionId();\r\n    });\r\n\r\n    this.hubConnection.on(\"OnlineUsers\", (onlineUsers)=>{\r\n      console.log(\"Online Users !\");\r\n      this.onlineUsers = [...onlineUsers];\r\n    });\r\n\r\n    this.hubConnection.on(\"NewMessage\", (message: Message)=>{\r\n      console.log(\"New Message !\");\r\n      this.messages = [...this.messages, message]\r\n    });\r\n  }\r\n\r\n  stopChat(){\r\n    this.hubConnection.stop().catch(error=>{console.log(error)});\r\n  }\r\n  async addUserConnectionId(){\r\n    return this.hubConnection?.invoke(\"AddUserConnectionId\", this.authService.getUserName()).catch(error=>{\r\n      console.log(error);\r\n    })\r\n  }\r\n  async sendMessage(text: string){\r\n    var message: Message = {\r\n      user: this.authService.getUserName(),\r\n      text : text,\r\n      dateTime: new Date().toLocaleDateString()\r\n    }\r\n    return this.hubConnection?.invoke(\"ReceiveMessage\",message).catch(error=>{\r\n      console.log(error);\r\n    })\r\n  }\r\n  async stopPrivateChat(user: string){\r\n    return this.hubConnection?.invoke(\"RemovePrivateChat\", this.authService.getUserName()).catch(error=>{\r\n      console.log(error);\r\n    })\r\n  }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}