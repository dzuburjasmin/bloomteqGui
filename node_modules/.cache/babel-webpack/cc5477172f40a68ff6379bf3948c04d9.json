{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/dzubu/source/repos/bloomteq gui/bloomteqGui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortController } from \"./AbortController\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\"; // Not exported from 'index', this type is internal.\n\n/** @private */\n\nexport class LongPollingTransport {\n  // This is an internal type, not exported from 'index' so this is really just internal.\n  get pollAborted() {\n    return this._pollAbort.aborted;\n  }\n\n  constructor(httpClient, logger, options) {\n    this._httpClient = httpClient;\n    this._logger = logger;\n    this._pollAbort = new AbortController();\n    this._options = options;\n    this._running = false;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n\n  connect(url, transferFormat) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      Arg.isRequired(url, \"url\");\n      Arg.isRequired(transferFormat, \"transferFormat\");\n      Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n      _this._url = url;\n\n      _this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\"); // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\n\n\n      if (transferFormat === TransferFormat.Binary && typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\") {\n        throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n      }\n\n      const [name, value] = getUserAgentHeader();\n      const headers = {\n        [name]: value,\n        ..._this._options.headers\n      };\n      const pollOptions = {\n        abortSignal: _this._pollAbort.signal,\n        headers,\n        timeout: 100000,\n        withCredentials: _this._options.withCredentials\n      };\n\n      if (transferFormat === TransferFormat.Binary) {\n        pollOptions.responseType = \"arraybuffer\";\n      } // Make initial long polling request\n      // Server uses first long polling request to finish initializing connection and it returns without data\n\n\n      const pollUrl = `${url}&_=${Date.now()}`;\n\n      _this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n\n      const response = yield _this._httpClient.get(pollUrl, pollOptions);\n\n      if (response.statusCode !== 200) {\n        _this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`); // Mark running as false so that the poll immediately ends and runs the close logic\n\n\n        _this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n        _this._running = false;\n      } else {\n        _this._running = true;\n      }\n\n      _this._receiving = _this._poll(_this._url, pollOptions);\n    })();\n  }\n\n  _poll(url, pollOptions) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        while (_this2._running) {\n          try {\n            const pollUrl = `${url}&_=${Date.now()}`;\n\n            _this2._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n\n            const response = yield _this2._httpClient.get(pollUrl, pollOptions);\n\n            if (response.statusCode === 204) {\n              _this2._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\n\n              _this2._running = false;\n            } else if (response.statusCode !== 200) {\n              _this2._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`); // Unexpected status code\n\n\n              _this2._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n              _this2._running = false;\n            } else {\n              // Process the response\n              if (response.content) {\n                _this2._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, _this2._options.logMessageContent)}.`);\n\n                if (_this2.onreceive) {\n                  _this2.onreceive(response.content);\n                }\n              } else {\n                // This is another way timeout manifest.\n                _this2._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              }\n            }\n          } catch (e) {\n            if (!_this2._running) {\n              // Log but disregard errors that occur after stopping\n              _this2._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\n            } else {\n              if (e instanceof TimeoutError) {\n                // Ignore timeouts and reissue the poll.\n                _this2._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              } else {\n                // Close the connection with the error as the result.\n                _this2._closeError = e;\n                _this2._running = false;\n              }\n            }\n          }\n        }\n      } finally {\n        _this2._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\"); // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\n        // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\n\n\n        if (!_this2.pollAborted) {\n          _this2._raiseOnClose();\n        }\n      }\n    })();\n  }\n\n  send(data) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this3._running) {\n        return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\n      }\n\n      return sendMessage(_this3._logger, \"LongPolling\", _this3._httpClient, _this3._url, data, _this3._options);\n    })();\n  }\n\n  stop() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\"); // Tell receiving loop to stop, abort any current request, and then wait for it to finish\n\n\n      _this4._running = false;\n\n      _this4._pollAbort.abort();\n\n      try {\n        yield _this4._receiving; // Send DELETE to clean up long polling on the server\n\n        _this4._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${_this4._url}.`);\n\n        const headers = {};\n        const [name, value] = getUserAgentHeader();\n        headers[name] = value;\n        const deleteOptions = {\n          headers: { ...headers,\n            ..._this4._options.headers\n          },\n          timeout: _this4._options.timeout,\n          withCredentials: _this4._options.withCredentials\n        };\n        let error;\n\n        try {\n          yield _this4._httpClient.delete(_this4._url, deleteOptions);\n        } catch (err) {\n          error = err;\n        }\n\n        if (error) {\n          if (error instanceof HttpError) {\n            if (error.statusCode === 404) {\n              _this4._logger.log(LogLevel.Trace, \"(LongPolling transport) A 404 response was returned from sending a DELETE request.\");\n            } else {\n              _this4._logger.log(LogLevel.Trace, `(LongPolling transport) Error sending a DELETE request: ${error}`);\n            }\n          }\n        } else {\n          _this4._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\n        }\n      } finally {\n        _this4._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\"); // Raise close event here instead of in polling\n        // It needs to happen after the DELETE request is sent\n\n\n        _this4._raiseOnClose();\n      }\n    })();\n  }\n\n  _raiseOnClose() {\n    if (this.onclose) {\n      let logMessage = \"(LongPolling transport) Firing onclose event.\";\n\n      if (this._closeError) {\n        logMessage += \" Error: \" + this._closeError;\n      }\n\n      this._logger.log(LogLevel.Trace, logMessage);\n\n      this.onclose(this._closeError);\n    }\n  }\n\n} //# sourceMappingURL=LongPollingTransport.js.map","map":{"version":3,"sources":["C:/Users/dzubu/source/repos/bloomteq gui/bloomteqGui/node_modules/@microsoft/signalr/dist/esm/LongPollingTransport.js"],"names":["AbortController","HttpError","TimeoutError","LogLevel","TransferFormat","Arg","getDataDetail","getUserAgentHeader","sendMessage","LongPollingTransport","pollAborted","_pollAbort","aborted","constructor","httpClient","logger","options","_httpClient","_logger","_options","_running","onreceive","onclose","connect","url","transferFormat","isRequired","isIn","_url","log","Trace","Binary","XMLHttpRequest","responseType","Error","name","value","headers","pollOptions","abortSignal","signal","timeout","withCredentials","pollUrl","Date","now","response","get","statusCode","_closeError","statusText","_receiving","_poll","Information","content","logMessageContent","e","message","_raiseOnClose","send","data","Promise","reject","stop","abort","deleteOptions","error","delete","err","logMessage"],"mappings":"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","sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport {\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    get pollAborted() {\r\n        return this._pollAbort.aborted;\r\n    }\r\n    constructor(httpClient, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n        this._running = false;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._url = url;\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n        const pollOptions = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        }\r\n        else {\r\n            this._running = true;\r\n        }\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n    async _poll(url, pollOptions) {\r\n        try {\r\n            while (this._running) {\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n                        this._running = false;\r\n                    }\r\n                    else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    }\r\n                    else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    }\r\n                    else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                        else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n    async send(data) {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, data, this._options);\r\n    }\r\n    async stop() {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n        try {\r\n            await this._receiving;\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n            const headers = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n            const deleteOptions = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            let error;\r\n            try {\r\n                await this._httpClient.delete(this._url, deleteOptions);\r\n            }\r\n            catch (err) {\r\n                error = err;\r\n            }\r\n            if (error) {\r\n                if (error instanceof HttpError) {\r\n                    if (error.statusCode === 404) {\r\n                        this._logger.log(LogLevel.Trace, \"(LongPolling transport) A 404 response was returned from sending a DELETE request.\");\r\n                    }\r\n                    else {\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Error sending a DELETE request: ${error}`);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\r\n            }\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n    _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=LongPollingTransport.js.map"]},"metadata":{},"sourceType":"module"}