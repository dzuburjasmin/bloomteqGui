{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/dzubu/source/repos/LiveChat gui/LiveChatGui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { environment } from 'src/environments/environment';\nimport { PrivateChatComponent } from '../components/private-chat/private-chat.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/dialog\";\nconst baseUrl = environment.baseUrl;\nexport let ChatService = /*@__PURE__*/(() => {\n  class ChatService {\n    constructor(http, authService, router, dialog) {\n      this.http = http;\n      this.authService = authService;\n      this.router = router;\n      this.dialog = dialog;\n      this.onlineUsers = [];\n      this.messages = [];\n      this.privateMessages = [];\n      this.privateChatStarted = false;\n      this.token = \"\";\n      this.token = localStorage.getItem('token');\n    }\n\n    createChat() {\n      this.hubConnection = new HubConnectionBuilder().configureLogging(LogLevel.Debug).withUrl(baseUrl + \"/hubs\", {\n        withCredentials: true,\n        accessTokenFactory: () => this.token\n      }).withAutomaticReconnect().build();\n      this.hubConnection.start().catch(error => {\n        console.log(error);\n      });\n      this.hubConnection.on(\"Connected\", () => {\n        console.log(\"Connected !\");\n        this.addUserConnectionId();\n      });\n      this.hubConnection.on(\"OnlineUsers\", onlineUsers => {\n        console.log(\"Online Users !\");\n        this.onlineUsers = [...onlineUsers];\n      });\n      this.hubConnection.on(\"MessageHistory\", messageHistory => {\n        console.log(\"Message History !\");\n        this.messages = [...messageHistory];\n      });\n      this.hubConnection.on(\"NewMessage\", message => {\n        console.log(\"New Message !\");\n        this.messages = [message, ...this.messages];\n      });\n      this.hubConnection.on(\"OpenPrivateChat\", message => {\n        console.log(\"Open Private !\");\n        this.privateMessages = [message, ...this.privateMessages];\n        this.privateChatStarted = true;\n        this.openPrivateChat(message.user);\n      });\n      this.hubConnection.on(\"NewPrivateMessage\", message => {\n        console.log(\"New private message !\");\n        this.privateMessages = [message, ...this.privateMessages];\n      });\n      this.hubConnection.on(\"ClosePrivateChat\", () => {\n        this.privateChatStarted = false;\n        this.privateMessages = [];\n      });\n      this.hubConnection.on(\"MessageLimitReached\", () => {\n        alert(\"Message limit reached, please wait...\");\n      });\n    }\n\n    stopChat() {\n      this.hubConnection.stop().catch(error => {\n        console.log(error);\n      });\n    }\n\n    addUserConnectionId() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        var _a;\n\n        return (_a = _this.hubConnection) === null || _a === void 0 ? void 0 : _a.invoke(\"AddUserConnectionId\", _this.authService.getUserName()).catch(error => {\n          console.log(error);\n        });\n      })();\n    }\n\n    sendMessage(text) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        var _a;\n\n        var message = {\n          user: _this2.authService.getUserName(),\n          text: text,\n          dateTime: new Date()\n        };\n        return (_a = _this2.hubConnection) === null || _a === void 0 ? void 0 : _a.invoke(\"ReceiveMessage\", message).catch(error => {\n          console.log(error);\n        });\n      })();\n    }\n\n    stopPrivateChat(otherUser) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        var _a;\n\n        return (_a = _this3.hubConnection) === null || _a === void 0 ? void 0 : _a.invoke(\"RemovePrivateChat\", _this3.authService.getUserName(), otherUser).catch(error => {\n          console.log(error);\n        });\n      })();\n    }\n\n    sendPrivateMess(receiver, text) {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        var _a, _b;\n\n        var message = {\n          user: _this4.authService.getUserName(),\n          text: text,\n          dateTime: new Date(),\n          receiver: receiver\n        };\n\n        if (_this4.privateChatStarted == false) {\n          _this4.privateChatStarted = true;\n          return (_a = _this4.hubConnection) === null || _a === void 0 ? void 0 : _a.invoke(\"CreatePrivateChat\", message).then(() => {\n            _this4.privateMessages = [..._this4.privateMessages, message];\n          }).catch(error => {\n            console.log(error);\n          });\n        } else {\n          return (_b = _this4.hubConnection) === null || _b === void 0 ? void 0 : _b.invoke(\"ReceivePrivate\", message).catch(error => {\n            console.log(error);\n          });\n        }\n      })();\n    }\n\n    logoutUser() {\n      var _this5 = this;\n\n      return _asyncToGenerator(function* () {\n        var _a;\n\n        return (_a = _this5.hubConnection) === null || _a === void 0 ? void 0 : _a.invoke(\"logoutUser\").catch(error => {\n          console.log(error);\n        });\n      })();\n    }\n\n    openPrivateChat(receiver) {\n      const dialogRef = this.dialog.open(PrivateChatComponent, {\n        width: '500px',\n        data: {\n          receiver: receiver\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        console.log('The dialog was closed');\n      });\n    }\n\n  }\n\n  ChatService.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.MatDialog));\n  };\n\n  ChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n  return ChatService;\n})();","map":null,"metadata":{},"sourceType":"module"}