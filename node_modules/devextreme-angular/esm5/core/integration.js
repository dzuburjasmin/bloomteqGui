/*!
 * devextreme-angular
 * Version: 21.2.15
 * Build date: Tue Dec 12 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
import { NgModule, Inject, NgZone, Optional, VERSION } from '@angular/core';
import { XhrFactory } from '@angular/common/http';
import httpRequest from 'devextreme/core/http_request';
import { DOCUMENT } from '@angular/common';
import domAdapter from 'devextreme/core/dom_adapter';
import readyCallbacks from 'devextreme/core/utils/ready_callbacks';
import eventsEngine from 'devextreme/events/core/events_engine';
var outsideZoneEvents = ['mousemove', 'mouseover', 'mouseout'];
var insideZoneEvents = ['mouseup', 'click', 'mousedown', 'transitionend', 'wheel'];
var originalAdd;
var callbacks = [];
var readyCallbackAdd = function (callback) {
    if (!originalAdd) {
        originalAdd = this.callBase.bind(this);
    }
    callbacks.push(callback);
};
var ɵ0 = readyCallbackAdd;
readyCallbacks.inject({
    add: function (callback) {
        return readyCallbackAdd.call(this, callback);
    }
});
var doInjections = function (document, ngZone, xhrFactory) {
    if (Number(VERSION.major) < 7) {
        console.warn("Your version of Angular is not supported (https://supportcenter.devexpress.com/ticket/details/t879496). Please update your project to version 7 or later. Please refer to the Angular Update Guide for more information: https://update.angular.io");
    }
    domAdapter.inject({
        _document: document,
        listen: function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var eventName = args[1];
            if (outsideZoneEvents.indexOf(eventName) !== -1) {
                return ngZone.runOutsideAngular(function () {
                    return _this.callBase.apply(_this, args);
                });
            }
            if (ngZone.isStable && insideZoneEvents.indexOf(eventName) !== -1) {
                return ngZone.run(function () {
                    return _this.callBase.apply(_this, args);
                });
            }
            return this.callBase.apply(this, args);
        },
        isElementNode: function (element) {
            return element && element.nodeType === 1;
        },
        isTextNode: function (element) {
            return element && element.nodeType === 3;
        },
        isDocument: function (element) {
            return element && element.nodeType === 9;
        }
    });
    httpRequest.inject({
        getXhr: function () {
            if (!xhrFactory) {
                return this.callBase.apply(this);
            }
            var _xhr = xhrFactory.build();
            if (!('withCredentials' in _xhr)) {
                _xhr['withCredentials'] = false;
            }
            return _xhr;
        }
    });
    var runReadyCallbacksInZone = function () {
        ngZone.run(function () {
            eventsEngine.set({});
            callbacks.forEach(function (callback) { return originalAdd.call(null, callback); });
            callbacks = [];
            readyCallbacks.fire();
        });
    };
    runReadyCallbacksInZone();
    readyCallbackAdd = function (callback) { return ngZone.run(function () { return callback(); }); };
    doInjections = runReadyCallbacksInZone;
};
var ɵ1 = doInjections;
var DxIntegrationModule = /** @class */ (function () {
    function DxIntegrationModule(document, ngZone, xhrFactory) {
        doInjections(document, ngZone, xhrFactory);
    }
    DxIntegrationModule.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: NgZone },
        { type: XhrFactory, decorators: [{ type: Optional }] }
    ]; };
    DxIntegrationModule = tslib_1.__decorate([
        NgModule({}),
        tslib_1.__param(0, Inject(DOCUMENT)), tslib_1.__param(2, Optional()),
        tslib_1.__metadata("design:paramtypes", [Object, NgZone, XhrFactory])
    ], DxIntegrationModule);
    return DxIntegrationModule;
}());
export { DxIntegrationModule };
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,