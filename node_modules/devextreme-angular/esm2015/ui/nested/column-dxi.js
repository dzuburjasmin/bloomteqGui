/*!
 * devextreme-angular
 * Version: 21.2.15
 * Build date: Tue Dec 12 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
var DxiColumnComponent_1;
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf, Output, EventEmitter, ContentChildren, forwardRef, QueryList } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxiDataGridColumn } from './base/data-grid-column-dxi';
import { DxiButtonComponent } from './button-dxi';
import { DxiValidationRuleComponent } from './validation-rule-dxi';
let DxiColumnComponent = DxiColumnComponent_1 = class DxiColumnComponent extends DxiDataGridColumn {
    constructor(parentOptionHost, optionHost) {
        super();
        this._createEventEmitters([
            { emit: 'filterValueChange' },
            { emit: 'filterValuesChange' },
            { emit: 'groupIndexChange' },
            { emit: 'selectedFilterOperationChange' },
            { emit: 'sortIndexChange' },
            { emit: 'sortOrderChange' },
            { emit: 'visibleChange' },
            { emit: 'visibleIndexChange' }
        ]);
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get _optionPath() {
        return 'columns';
    }
    get buttonsChildren() {
        return this._getOption('buttons');
    }
    set buttonsChildren(value) {
        this.setChildren('buttons', value);
    }
    get columnsChildren() {
        return this._getOption('columns');
    }
    set columnsChildren(value) {
        this.setChildren('columns', value);
    }
    get validationRulesChildren() {
        return this._getOption('validationRules');
    }
    set validationRulesChildren(value) {
        this.setChildren('validationRules', value);
    }
    ngOnDestroy() {
        this._deleteRemovedOptions(this._fullOptionPath());
    }
};
DxiColumnComponent.ctorParameters = () => [
    { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
    { type: NestedOptionHost, decorators: [{ type: Host }] }
];
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DxiColumnComponent.prototype, "filterValueChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DxiColumnComponent.prototype, "filterValuesChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DxiColumnComponent.prototype, "groupIndexChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DxiColumnComponent.prototype, "selectedFilterOperationChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DxiColumnComponent.prototype, "sortIndexChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DxiColumnComponent.prototype, "sortOrderChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DxiColumnComponent.prototype, "visibleChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], DxiColumnComponent.prototype, "visibleIndexChange", void 0);
tslib_1.__decorate([
    ContentChildren(forwardRef(() => DxiButtonComponent)),
    tslib_1.__metadata("design:type", QueryList),
    tslib_1.__metadata("design:paramtypes", [Object])
], DxiColumnComponent.prototype, "buttonsChildren", null);
tslib_1.__decorate([
    ContentChildren(forwardRef(() => DxiColumnComponent_1)),
    tslib_1.__metadata("design:type", QueryList),
    tslib_1.__metadata("design:paramtypes", [Object])
], DxiColumnComponent.prototype, "columnsChildren", null);
tslib_1.__decorate([
    ContentChildren(forwardRef(() => DxiValidationRuleComponent)),
    tslib_1.__metadata("design:type", QueryList),
    tslib_1.__metadata("design:paramtypes", [Object])
], DxiColumnComponent.prototype, "validationRulesChildren", null);
DxiColumnComponent = DxiColumnComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'dxi-column',
        template: '',
        providers: [NestedOptionHost],
        inputs: [
            'alignment',
            'allowEditing',
            'allowExporting',
            'allowFiltering',
            'allowFixing',
            'allowGrouping',
            'allowHeaderFiltering',
            'allowHiding',
            'allowReordering',
            'allowResizing',
            'allowSearch',
            'allowSorting',
            'autoExpandGroup',
            'buttons',
            'calculateCellValue',
            'calculateDisplayValue',
            'calculateFilterExpression',
            'calculateGroupValue',
            'calculateSortValue',
            'caption',
            'cellTemplate',
            'columns',
            'cssClass',
            'customizeText',
            'dataField',
            'dataType',
            'editCellTemplate',
            'editorOptions',
            'encodeHtml',
            'falseText',
            'filterOperations',
            'filterType',
            'filterValue',
            'filterValues',
            'fixed',
            'fixedPosition',
            'format',
            'formItem',
            'groupCellTemplate',
            'groupIndex',
            'headerCellTemplate',
            'headerFilter',
            'hidingPriority',
            'isBand',
            'lookup',
            'minWidth',
            'name',
            'ownerBand',
            'renderAsync',
            'selectedFilterOperation',
            'setCellValue',
            'showEditorAlways',
            'showInColumnChooser',
            'showWhenGrouped',
            'sortIndex',
            'sortingMethod',
            'sortOrder',
            'trueText',
            'type',
            'validationRules',
            'visible',
            'visibleIndex',
            'width'
        ],
        styles: ['']
    }),
    tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
    tslib_1.__param(1, Host()),
    tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
        NestedOptionHost])
], DxiColumnComponent);
export { DxiColumnComponent };
let DxiColumnModule = class DxiColumnModule {
};
DxiColumnModule = tslib_1.__decorate([
    NgModule({
        declarations: [
            DxiColumnComponent
        ],
        exports: [
            DxiColumnComponent
        ],
    })
], DxiColumnModule);
export { DxiColumnModule };
//# sourceMappingURL=data:application/json;base64,