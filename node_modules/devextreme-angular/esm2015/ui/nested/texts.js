/*!
 * devextreme-angular
 * Version: 21.2.15
 * Build date: Tue Dec 12 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxoGanttHeaderFilterTexts } from './base/gantt-header-filter-texts';
let DxoTextsComponent = class DxoTextsComponent extends DxoGanttHeaderFilterTexts {
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get _optionPath() {
        return 'texts';
    }
    ngOnInit() {
        this._addRecreatedComponent();
    }
    ngOnDestroy() {
        this._addRemovedOption(this._getOptionPath());
    }
};
DxoTextsComponent.ctorParameters = () => [
    { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
    { type: NestedOptionHost, decorators: [{ type: Host }] }
];
DxoTextsComponent = tslib_1.__decorate([
    Component({
        selector: 'dxo-texts',
        template: '',
        providers: [NestedOptionHost],
        inputs: [
            'fix',
            'leftPosition',
            'rightPosition',
            'unfix',
            'addRow',
            'cancelAllChanges',
            'cancelRowChanges',
            'confirmDeleteMessage',
            'confirmDeleteTitle',
            'deleteRow',
            'editRow',
            'saveAllChanges',
            'saveRowChanges',
            'undeleteRow',
            'validationCancelChanges',
            'exportAll',
            'exportSelectedRows',
            'exportTo',
            'clearFilter',
            'createFilter',
            'filterEnabledHint',
            'groupByThisColumn',
            'groupContinuedMessage',
            'groupContinuesMessage',
            'ungroup',
            'ungroupAll',
            'cancel',
            'emptyValue',
            'ok',
            'avg',
            'avgOtherColumn',
            'count',
            'max',
            'maxOtherColumn',
            'min',
            'minOtherColumn',
            'sum',
            'sumOtherColumn',
            'allFields',
            'columnFields',
            'dataFields',
            'filterFields',
            'rowFields',
            'columnFieldArea',
            'dataFieldArea',
            'filterFieldArea',
            'rowFieldArea',
            'collapseAll',
            'dataNotAvailable',
            'expandAll',
            'exportToExcel',
            'grandTotal',
            'noData',
            'removeAllSorting',
            'showFieldChooser',
            'sortColumnBySummary',
            'sortRowBySummary',
            'total',
            'addRowToNode'
        ],
        styles: ['']
    }),
    tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
    tslib_1.__param(1, Host()),
    tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
        NestedOptionHost])
], DxoTextsComponent);
export { DxoTextsComponent };
let DxoTextsModule = class DxoTextsModule {
};
DxoTextsModule = tslib_1.__decorate([
    NgModule({
        declarations: [
            DxoTextsComponent
        ],
        exports: [
            DxoTextsComponent
        ],
    })
], DxoTextsModule);
export { DxoTextsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kZXZleHRyZW1lLWFuZ3VsYXIvdWkvbmVzdGVkLyIsInNvdXJjZXMiOlsidGV4dHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0dBV0c7O0FBRUgsb0NBQW9DO0FBRXBDLGlEQUFpRDtBQUVqRCxPQUFPLEVBQ0gsU0FBUyxFQUdULFFBQVEsRUFDUixJQUFJLEVBQ0osUUFBUSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBTXZCLE9BQU8sRUFDSCxnQkFBZ0IsR0FDbkIsTUFBTSx5QkFBeUIsQ0FBQztBQUNqQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQXNFN0UsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBa0IsU0FBUSx5QkFBeUI7SUFPNUQsWUFBZ0MsZ0JBQWtDLEVBQ2xELFVBQTRCO1FBQ3hDLEtBQUssRUFBRSxDQUFDO1FBQ1IsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQVZELElBQWMsV0FBVztRQUNyQixPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBV0QsUUFBUTtRQUNKLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7Q0FHSixDQUFBOztZQWpCcUQsZ0JBQWdCLHVCQUFyRCxRQUFRLFlBQUksSUFBSTtZQUNELGdCQUFnQix1QkFBbkMsSUFBSTs7QUFSSixpQkFBaUI7SUFuRTdCLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxXQUFXO1FBQ3JCLFFBQVEsRUFBRSxFQUFFO1FBRVosU0FBUyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7UUFDN0IsTUFBTSxFQUFFO1lBQ0osS0FBSztZQUNMLGNBQWM7WUFDZCxlQUFlO1lBQ2YsT0FBTztZQUNQLFFBQVE7WUFDUixrQkFBa0I7WUFDbEIsa0JBQWtCO1lBQ2xCLHNCQUFzQjtZQUN0QixvQkFBb0I7WUFDcEIsV0FBVztZQUNYLFNBQVM7WUFDVCxnQkFBZ0I7WUFDaEIsZ0JBQWdCO1lBQ2hCLGFBQWE7WUFDYix5QkFBeUI7WUFDekIsV0FBVztZQUNYLG9CQUFvQjtZQUNwQixVQUFVO1lBQ1YsYUFBYTtZQUNiLGNBQWM7WUFDZCxtQkFBbUI7WUFDbkIsbUJBQW1CO1lBQ25CLHVCQUF1QjtZQUN2Qix1QkFBdUI7WUFDdkIsU0FBUztZQUNULFlBQVk7WUFDWixRQUFRO1lBQ1IsWUFBWTtZQUNaLElBQUk7WUFDSixLQUFLO1lBQ0wsZ0JBQWdCO1lBQ2hCLE9BQU87WUFDUCxLQUFLO1lBQ0wsZ0JBQWdCO1lBQ2hCLEtBQUs7WUFDTCxnQkFBZ0I7WUFDaEIsS0FBSztZQUNMLGdCQUFnQjtZQUNoQixXQUFXO1lBQ1gsY0FBYztZQUNkLFlBQVk7WUFDWixjQUFjO1lBQ2QsV0FBVztZQUNYLGlCQUFpQjtZQUNqQixlQUFlO1lBQ2YsaUJBQWlCO1lBQ2pCLGNBQWM7WUFDZCxhQUFhO1lBQ2Isa0JBQWtCO1lBQ2xCLFdBQVc7WUFDWCxlQUFlO1lBQ2YsWUFBWTtZQUNaLFFBQVE7WUFDUixrQkFBa0I7WUFDbEIsa0JBQWtCO1lBQ2xCLHFCQUFxQjtZQUNyQixrQkFBa0I7WUFDbEIsT0FBTztZQUNQLGNBQWM7U0FDakI7aUJBOURRLEVBQUU7S0ErRGQsQ0FBQztJQVFlLG1CQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsbUJBQUEsSUFBSSxFQUFFLENBQUE7SUFDdEIsbUJBQUEsSUFBSSxFQUFFLENBQUE7NkNBRG1DLGdCQUFnQjtRQUN0QyxnQkFBZ0I7R0FSbkMsaUJBQWlCLENBd0I3QjtTQXhCWSxpQkFBaUI7QUFrQzlCLElBQWEsY0FBYyxHQUEzQixNQUFhLGNBQWM7Q0FBSSxDQUFBO0FBQWxCLGNBQWM7SUFSMUIsUUFBUSxDQUFDO1FBQ1IsWUFBWSxFQUFFO1lBQ1osaUJBQWlCO1NBQ2xCO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsaUJBQWlCO1NBQ2xCO0tBQ0YsQ0FBQztHQUNXLGNBQWMsQ0FBSTtTQUFsQixjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBkZXZleHRyZW1lLWFuZ3VsYXJcbiAqIFZlcnNpb246IDIxLjIuMTVcbiAqIEJ1aWxkIGRhdGU6IFR1ZSBEZWMgMTIgMjAyM1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjMgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXG4gKlxuICogVGhpcyBzb2Z0d2FyZSBtYXkgYmUgbW9kaWZpZWQgYW5kIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtc1xuICogb2YgdGhlIE1JVCBsaWNlbnNlLiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgcHJvamVjdCBmb3IgZGV0YWlscy5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRGV2RXhwcmVzcy9kZXZleHRyZW1lLWFuZ3VsYXJcbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGggKi9cclxuXHJcbi8qIHRzbGludDpkaXNhYmxlOnVzZS1pbnB1dC1wcm9wZXJ0eS1kZWNvcmF0b3IgKi9cclxuXHJcbmltcG9ydCB7XHJcbiAgICBDb21wb25lbnQsXHJcbiAgICBPbkluaXQsXHJcbiAgICBPbkRlc3Ryb3ksXHJcbiAgICBOZ01vZHVsZSxcclxuICAgIEhvc3QsXHJcbiAgICBTa2lwU2VsZlxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmltcG9ydCB7XHJcbiAgICBOZXN0ZWRPcHRpb25Ib3N0LFxyXG59IGZyb20gJ2RldmV4dHJlbWUtYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRHhvR2FudHRIZWFkZXJGaWx0ZXJUZXh0cyB9IGZyb20gJy4vYmFzZS9nYW50dC1oZWFkZXItZmlsdGVyLXRleHRzJztcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZHhvLXRleHRzJyxcclxuICAgIHRlbXBsYXRlOiAnJyxcclxuICAgIHN0eWxlczogWycnXSxcclxuICAgIHByb3ZpZGVyczogW05lc3RlZE9wdGlvbkhvc3RdLFxyXG4gICAgaW5wdXRzOiBbXHJcbiAgICAgICAgJ2ZpeCcsXHJcbiAgICAgICAgJ2xlZnRQb3NpdGlvbicsXHJcbiAgICAgICAgJ3JpZ2h0UG9zaXRpb24nLFxyXG4gICAgICAgICd1bmZpeCcsXHJcbiAgICAgICAgJ2FkZFJvdycsXHJcbiAgICAgICAgJ2NhbmNlbEFsbENoYW5nZXMnLFxyXG4gICAgICAgICdjYW5jZWxSb3dDaGFuZ2VzJyxcclxuICAgICAgICAnY29uZmlybURlbGV0ZU1lc3NhZ2UnLFxyXG4gICAgICAgICdjb25maXJtRGVsZXRlVGl0bGUnLFxyXG4gICAgICAgICdkZWxldGVSb3cnLFxyXG4gICAgICAgICdlZGl0Um93JyxcclxuICAgICAgICAnc2F2ZUFsbENoYW5nZXMnLFxyXG4gICAgICAgICdzYXZlUm93Q2hhbmdlcycsXHJcbiAgICAgICAgJ3VuZGVsZXRlUm93JyxcclxuICAgICAgICAndmFsaWRhdGlvbkNhbmNlbENoYW5nZXMnLFxyXG4gICAgICAgICdleHBvcnRBbGwnLFxyXG4gICAgICAgICdleHBvcnRTZWxlY3RlZFJvd3MnLFxyXG4gICAgICAgICdleHBvcnRUbycsXHJcbiAgICAgICAgJ2NsZWFyRmlsdGVyJyxcclxuICAgICAgICAnY3JlYXRlRmlsdGVyJyxcclxuICAgICAgICAnZmlsdGVyRW5hYmxlZEhpbnQnLFxyXG4gICAgICAgICdncm91cEJ5VGhpc0NvbHVtbicsXHJcbiAgICAgICAgJ2dyb3VwQ29udGludWVkTWVzc2FnZScsXHJcbiAgICAgICAgJ2dyb3VwQ29udGludWVzTWVzc2FnZScsXHJcbiAgICAgICAgJ3VuZ3JvdXAnLFxyXG4gICAgICAgICd1bmdyb3VwQWxsJyxcclxuICAgICAgICAnY2FuY2VsJyxcclxuICAgICAgICAnZW1wdHlWYWx1ZScsXHJcbiAgICAgICAgJ29rJyxcclxuICAgICAgICAnYXZnJyxcclxuICAgICAgICAnYXZnT3RoZXJDb2x1bW4nLFxyXG4gICAgICAgICdjb3VudCcsXHJcbiAgICAgICAgJ21heCcsXHJcbiAgICAgICAgJ21heE90aGVyQ29sdW1uJyxcclxuICAgICAgICAnbWluJyxcclxuICAgICAgICAnbWluT3RoZXJDb2x1bW4nLFxyXG4gICAgICAgICdzdW0nLFxyXG4gICAgICAgICdzdW1PdGhlckNvbHVtbicsXHJcbiAgICAgICAgJ2FsbEZpZWxkcycsXHJcbiAgICAgICAgJ2NvbHVtbkZpZWxkcycsXHJcbiAgICAgICAgJ2RhdGFGaWVsZHMnLFxyXG4gICAgICAgICdmaWx0ZXJGaWVsZHMnLFxyXG4gICAgICAgICdyb3dGaWVsZHMnLFxyXG4gICAgICAgICdjb2x1bW5GaWVsZEFyZWEnLFxyXG4gICAgICAgICdkYXRhRmllbGRBcmVhJyxcclxuICAgICAgICAnZmlsdGVyRmllbGRBcmVhJyxcclxuICAgICAgICAncm93RmllbGRBcmVhJyxcclxuICAgICAgICAnY29sbGFwc2VBbGwnLFxyXG4gICAgICAgICdkYXRhTm90QXZhaWxhYmxlJyxcclxuICAgICAgICAnZXhwYW5kQWxsJyxcclxuICAgICAgICAnZXhwb3J0VG9FeGNlbCcsXHJcbiAgICAgICAgJ2dyYW5kVG90YWwnLFxyXG4gICAgICAgICdub0RhdGEnLFxyXG4gICAgICAgICdyZW1vdmVBbGxTb3J0aW5nJyxcclxuICAgICAgICAnc2hvd0ZpZWxkQ2hvb3NlcicsXHJcbiAgICAgICAgJ3NvcnRDb2x1bW5CeVN1bW1hcnknLFxyXG4gICAgICAgICdzb3J0Um93QnlTdW1tYXJ5JyxcclxuICAgICAgICAndG90YWwnLFxyXG4gICAgICAgICdhZGRSb3dUb05vZGUnXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEeG9UZXh0c0NvbXBvbmVudCBleHRlbmRzIER4b0dhbnR0SGVhZGVyRmlsdGVyVGV4dHMgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCAge1xyXG5cclxuICAgIHByb3RlY3RlZCBnZXQgX29wdGlvblBhdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuICd0ZXh0cyc7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKEBTa2lwU2VsZigpIEBIb3N0KCkgcGFyZW50T3B0aW9uSG9zdDogTmVzdGVkT3B0aW9uSG9zdCxcclxuICAgICAgICAgICAgQEhvc3QoKSBvcHRpb25Ib3N0OiBOZXN0ZWRPcHRpb25Ib3N0KSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBwYXJlbnRPcHRpb25Ib3N0LnNldE5lc3RlZE9wdGlvbih0aGlzKTtcclxuICAgICAgICBvcHRpb25Ib3N0LnNldEhvc3QodGhpcywgdGhpcy5fZnVsbE9wdGlvblBhdGguYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuX2FkZFJlY3JlYXRlZENvbXBvbmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuX2FkZFJlbW92ZWRPcHRpb24odGhpcy5fZ2V0T3B0aW9uUGF0aCgpKTtcclxuICAgIH1cclxuXHJcblxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgRHhvVGV4dHNDb21wb25lbnRcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIER4b1RleHRzQ29tcG9uZW50XHJcbiAgXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIER4b1RleHRzTW9kdWxlIHsgfVxyXG4iXX0=