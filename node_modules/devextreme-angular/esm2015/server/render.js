/*!
 * devextreme-angular
 * Version: 21.2.15
 * Build date: Tue Dec 12 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
import { NgModule, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import infernoRenderer from 'devextreme/core/inferno_renderer';
import { renderToString } from 'inferno-server';
let DxServerModule = class DxServerModule {
    constructor(platformId) {
        if (isPlatformServer(platformId)) {
            infernoRenderer.inject({
                render: (component, props, container) => {
                    const el = infernoRenderer.createElement(component, props);
                    const document = container.ownerDocument;
                    const temp = document.createElement(container.tagName);
                    temp.innerHTML = renderToString(el);
                    const mainElement = temp.childNodes[0];
                    const childString = mainElement.innerHTML;
                    for (let i = 0; i < mainElement.attributes.length; i++) {
                        temp.setAttribute(mainElement.attributes[i].name, mainElement.attributes[i].value);
                    }
                    temp.innerHTML = childString;
                    container.outerHTML = temp.outerHTML;
                }
            });
        }
    }
};
DxServerModule.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
DxServerModule = tslib_1.__decorate([
    NgModule({
        exports: [],
        imports: [],
        providers: []
    }),
    tslib_1.__param(0, Inject(PLATFORM_ID)),
    tslib_1.__metadata("design:paramtypes", [Object])
], DxServerModule);
export { DxServerModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZGV2ZXh0cmVtZS1hbmd1bGFyL3NlcnZlci8iLCJzb3VyY2VzIjpbInJlbmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7QUFFSCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsT0FBTyxlQUFlLE1BQU0sa0NBQWtDLENBQUM7QUFDL0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBT2hELElBQWEsY0FBYyxHQUEzQixNQUFhLGNBQWM7SUFDdkIsWUFBaUMsVUFBZTtRQUM1QyxJQUFJLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzlCLGVBQWUsQ0FBQyxNQUFNLENBQUM7Z0JBQ25CLE1BQU0sRUFBRSxDQUNSLFNBQVMsRUFDVCxLQUFLLEVBQ0wsU0FBUyxFQUNYLEVBQUU7b0JBQ0EsTUFBTSxFQUFFLEdBQUcsZUFBZSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBQzNELE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUM7b0JBQ3pDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUN2RCxJQUFJLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDcEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDdkMsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQztvQkFFMUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO3dCQUNwRCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ3RGO29CQUNELElBQUksQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDO29CQUM3QixTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ3pDLENBQUM7YUFBQyxDQUFDLENBQUM7U0FDUDtJQUNMLENBQUM7Q0FDSixDQUFBOzs0Q0F2QmdCLE1BQU0sU0FBQyxXQUFXOztBQUR0QixjQUFjO0lBTDFCLFFBQVEsQ0FBQztRQUNOLE9BQU8sRUFBRSxFQUFFO1FBQ1gsT0FBTyxFQUFFLEVBQUU7UUFDWCxTQUFTLEVBQUUsRUFBRTtLQUNoQixDQUFDO0lBRWUsbUJBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBOztHQUR2QixjQUFjLENBd0IxQjtTQXhCWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBkZXZleHRyZW1lLWFuZ3VsYXJcbiAqIFZlcnNpb246IDIxLjIuMTVcbiAqIEJ1aWxkIGRhdGU6IFR1ZSBEZWMgMTIgMjAyM1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjMgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXG4gKlxuICogVGhpcyBzb2Z0d2FyZSBtYXkgYmUgbW9kaWZpZWQgYW5kIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtc1xuICogb2YgdGhlIE1JVCBsaWNlbnNlLiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgcHJvamVjdCBmb3IgZGV0YWlscy5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRGV2RXhwcmVzcy9kZXZleHRyZW1lLWFuZ3VsYXJcbiAqL1xuXG5pbXBvcnQgeyBOZ01vZHVsZSwgSW5qZWN0LCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCBpbmZlcm5vUmVuZGVyZXIgZnJvbSAnZGV2ZXh0cmVtZS9jb3JlL2luZmVybm9fcmVuZGVyZXInO1xuaW1wb3J0IHsgcmVuZGVyVG9TdHJpbmcgfSBmcm9tICdpbmZlcm5vLXNlcnZlcic7XG5cbkBOZ01vZHVsZSh7XG4gICAgZXhwb3J0czogW10sXG4gICAgaW1wb3J0czogW10sXG4gICAgcHJvdmlkZXJzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBEeFNlcnZlck1vZHVsZSB7XG4gICAgY29uc3RydWN0b3IoQEluamVjdChQTEFURk9STV9JRCkgcGxhdGZvcm1JZDogYW55KSB7XG4gICAgICAgIGlmIChpc1BsYXRmb3JtU2VydmVyKHBsYXRmb3JtSWQpKSB7XG4gICAgICAgICAgICBpbmZlcm5vUmVuZGVyZXIuaW5qZWN0KHtcbiAgICAgICAgICAgICAgICByZW5kZXI6IChcbiAgICAgICAgICAgICAgICBjb21wb25lbnQsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSBpbmZlcm5vUmVuZGVyZXIuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkb2N1bWVudCA9IGNvbnRhaW5lci5vd25lckRvY3VtZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGNvbnRhaW5lci50YWdOYW1lKTtcbiAgICAgICAgICAgICAgICB0ZW1wLmlubmVySFRNTCA9IHJlbmRlclRvU3RyaW5nKGVsKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYWluRWxlbWVudCA9IHRlbXAuY2hpbGROb2Rlc1swXTtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZFN0cmluZyA9IG1haW5FbGVtZW50LmlubmVySFRNTDtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFpbkVsZW1lbnQuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wLnNldEF0dHJpYnV0ZShtYWluRWxlbWVudC5hdHRyaWJ1dGVzW2ldLm5hbWUsIG1haW5FbGVtZW50LmF0dHJpYnV0ZXNbaV0udmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0ZW1wLmlubmVySFRNTCA9IGNoaWxkU3RyaW5nO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5vdXRlckhUTUwgPSB0ZW1wLm91dGVySFRNTDtcbiAgICAgICAgICAgIH19KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==