/*!
 * devextreme-angular
 * Version: 21.2.15
 * Build date: Tue Dec 12 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import Store from 'devextreme/data/abstract_store';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import DxDiagram from 'devextreme/ui/diagram';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiCustomShapeComponent } from 'devextreme-angular/ui/nested';
/**
 * The Diagram UI component provides a visual interface to help you design new and modify existing diagrams.

 */
export declare class DxDiagramComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxDiagram;
    /**
     * Specifies how the Diagram UI component automatically zooms the work area.
    
     */
    autoZoomMode: string;
    /**
     * Configures the context menu&apos;s settings.
    
     */
    contextMenu: {
        commands?: Array<DevExpress.ui.dxDiagramCustomCommand | string>;
        enabled?: boolean;
    };
    /**
     * Configures the context toolbox&apos;s settings.
    
     */
    contextToolbox: {
        category?: string;
        displayMode?: string;
        enabled?: boolean;
        shapeIconsPerRow?: number;
        shapes?: Array<string>;
        width?: number;
    };
    /**
     * Provide access to an array of custom shapes.
    
     */
    customShapes: Array<any | {
        allowEditImage?: boolean;
        allowEditText?: boolean;
        allowResize?: boolean;
        backgroundImageHeight?: number;
        backgroundImageLeft?: number;
        backgroundImageToolboxUrl?: string;
        backgroundImageTop?: number;
        backgroundImageUrl?: string;
        backgroundImageWidth?: number;
        baseType?: string;
        category?: string;
        connectionPoints?: Array<any | {
            x?: number;
            y?: number;
        }>;
        defaultHeight?: number;
        defaultImageUrl?: string;
        defaultText?: string;
        defaultWidth?: number;
        imageHeight?: number;
        imageLeft?: number;
        imageTop?: number;
        imageWidth?: number;
        keepRatioOnAutoSize?: boolean;
        maxHeight?: number;
        maxWidth?: number;
        minHeight?: number;
        minWidth?: number;
        template?: any;
        templateHeight?: number;
        templateLeft?: number;
        templateTop?: number;
        templateWidth?: number;
        textHeight?: number;
        textLeft?: number;
        textTop?: number;
        textWidth?: number;
        title?: string;
        toolboxTemplate?: any;
        toolboxWidthToHeightRatio?: number;
        type?: string;
    }>;
    /**
     * Specifies a custom template for shapes.
    
     */
    customShapeTemplate: any;
    /**
     * Specifies a custom template for shapes in the toolbox.
    
     */
    customShapeToolboxTemplate: any;
    /**
     * Configures default item properties.
    
     */
    defaultItemProperties: {
        connectorLineEnd?: string;
        connectorLineStart?: string;
        connectorLineType?: string;
        shapeMaxHeight?: number | undefined;
        shapeMaxWidth?: number | undefined;
        shapeMinHeight?: number | undefined;
        shapeMinWidth?: number | undefined;
        style?: any;
        textStyle?: any;
    };
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    disabled: boolean;
    /**
     * Allows you to bind the collection of diagram edges to a data source. For more information, see the Data Binding section.
    
     */
    edges: {
        customDataExpr?: Function | string | undefined;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        fromExpr?: Function | string;
        fromLineEndExpr?: Function | string | undefined;
        fromPointIndexExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        lineTypeExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        pointsExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string | undefined;
        textStyleExpr?: Function | string | undefined;
        toExpr?: Function | string;
        toLineEndExpr?: Function | string | undefined;
        toPointIndexExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    };
    /**
     * Specifies which editing operations a user can perform.
    
     */
    editing: {
        allowAddShape?: boolean;
        allowChangeConnection?: boolean;
        allowChangeConnectorPoints?: boolean;
        allowChangeConnectorText?: boolean;
        allowChangeShapeText?: boolean;
        allowDeleteConnector?: boolean;
        allowDeleteShape?: boolean;
        allowMoveShape?: boolean;
        allowResizeShape?: boolean;
    };
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    elementAttr: any;
    /**
     * Configures export settings.
    
     */
    export: {
        fileName?: string;
        proxyUrl?: string | undefined;
    };
    /**
     * Specifies whether or not to display the UI component in full-screen mode.
    
     */
    fullScreen: boolean;
    /**
     * Specifies the grid pitch.
    
     */
    gridSize: number | {
        items?: Array<number>;
        value?: number;
    };
    /**
     * Indicates whether diagram content has unsaved changes.
    
     */
    hasChanges: boolean;
    /**
     * Specifies the UI component&apos;s height.
    
     */
    height: number | Function | string | undefined;
    /**
     * Configures the history toolbar&apos;s settings.
    
     */
    historyToolbar: {
        commands?: Array<DevExpress.ui.dxDiagramCustomCommand | string>;
        visible?: boolean;
    };
    /**
     * Configures the main toolbar settings.
    
     */
    mainToolbar: {
        commands?: Array<DevExpress.ui.dxDiagramCustomCommand | string>;
        visible?: boolean;
    };
    /**
     * Allows you to bind the collection of diagram nodes to a data source. For more information, see the Data Binding section.
    
     */
    nodes: {
        autoLayout?: string | {
            orientation?: string;
            type?: string;
        };
        autoSizeEnabled?: boolean;
        containerChildrenExpr?: Function | string | undefined;
        containerKeyExpr?: Function | string;
        customDataExpr?: Function | string | undefined;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        heightExpr?: Function | string | undefined;
        imageUrlExpr?: Function | string | undefined;
        itemsExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        leftExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        parentKeyExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string;
        textStyleExpr?: Function | string | undefined;
        topExpr?: Function | string | undefined;
        typeExpr?: Function | string;
        widthExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    };
    /**
     * Specifies the color of a diagram page.
    
     */
    pageColor: string;
    /**
     * Specifies the page orientation.
    
     */
    pageOrientation: string;
    /**
     * Specifies a size of pages.
    
     */
    pageSize: {
        height?: number;
        items?: Array<any | {
            height?: number;
            text?: string;
            width?: number;
        }>;
        width?: number;
    };
    /**
     * Configures the Properties panel settings.
    
     */
    propertiesPanel: {
        tabs?: Array<any | {
            commands?: Array<DevExpress.ui.dxDiagramCustomCommand | string>;
            groups?: Array<any | {
                commands?: Array<DevExpress.ui.dxDiagramCustomCommand | string>;
                title?: string;
            }>;
            title?: string;
        }>;
        visibility?: string;
    };
    /**
     * Specifies whether the diagram is read-only.
    
     */
    readOnly: boolean;
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    rtlEnabled: boolean;
    /**
     * Specifies whether grid lines are visible.
    
     */
    showGrid: boolean;
    /**
     * Switch the Diagram UI component to simple view mode.
    
     */
    simpleView: boolean;
    /**
     * Specifies whether diagram elements should snap to grid lines.
    
     */
    snapToGrid: boolean;
    /**
     * Configures the toolbox settings.
    
     */
    toolbox: {
        groups?: Array<any | string | {
            category?: string;
            displayMode?: string;
            expanded?: boolean;
            shapes?: Array<string>;
            title?: string;
        }>;
        shapeIconsPerRow?: number;
        showSearch?: boolean;
        visibility?: string;
        width?: number | undefined;
    };
    /**
     * Specifies the measurement unit for size properties.
    
     */
    units: string;
    /**
     * Specifies whether or not the UI component uses native scrolling.
    
     */
    useNativeScrolling: boolean;
    /**
     * Configures the view toolbar settings.
    
     */
    viewToolbar: {
        commands?: Array<DevExpress.ui.dxDiagramCustomCommand | string>;
        visible?: boolean;
    };
    /**
     * Specifies the measurement unit that is displayed in user interface elements.
    
     */
    viewUnits: string;
    /**
     * Specifies whether the UI component is visible.
    
     */
    visible: boolean;
    /**
     * Specifies the UI component&apos;s width.
    
     */
    width: number | Function | string | undefined;
    /**
     * Specifies the zoom level.
    
     */
    zoomLevel: number | {
        items?: Array<number>;
        value?: number | undefined;
    };
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * A function that is executed after a custom command item was clicked and allows you to implement the custom command&apos;s logic.
    
    
     */
    onCustomCommand: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed after a shape or connector is clicked.
    
    
     */
    onItemClick: EventEmitter<any>;
    /**
    
     * A function that is executed after a shape or connector is double-clicked.
    
    
     */
    onItemDblClick: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that allows you to prohibit an edit operation at run time.
    
    
     */
    onRequestEditOperation: EventEmitter<any>;
    /**
    
     * A function that is executed after diagram data is reloaded and allows you to specify whether or not the UI component should update the diagram layout.
    
    
     */
    onRequestLayoutUpdate: EventEmitter<any>;
    /**
    
     * A function that is executed after the selection is changed in the Diagram.
    
    
     */
    onSelectionChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    autoZoomModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    contextMenuChange: EventEmitter<{
        commands?: Array<DevExpress.ui.dxDiagramCustomCommand | string>;
        enabled?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    contextToolboxChange: EventEmitter<{
        category?: string;
        displayMode?: string;
        enabled?: boolean;
        shapeIconsPerRow?: number;
        shapes?: Array<string>;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customShapesChange: EventEmitter<Array<any | {
        allowEditImage?: boolean;
        allowEditText?: boolean;
        allowResize?: boolean;
        backgroundImageHeight?: number;
        backgroundImageLeft?: number;
        backgroundImageToolboxUrl?: string;
        backgroundImageTop?: number;
        backgroundImageUrl?: string;
        backgroundImageWidth?: number;
        baseType?: string;
        category?: string;
        connectionPoints?: Array<any | {
            x?: number;
            y?: number;
        }>;
        defaultHeight?: number;
        defaultImageUrl?: string;
        defaultText?: string;
        defaultWidth?: number;
        imageHeight?: number;
        imageLeft?: number;
        imageTop?: number;
        imageWidth?: number;
        keepRatioOnAutoSize?: boolean;
        maxHeight?: number;
        maxWidth?: number;
        minHeight?: number;
        minWidth?: number;
        template?: any;
        templateHeight?: number;
        templateLeft?: number;
        templateTop?: number;
        templateWidth?: number;
        textHeight?: number;
        textLeft?: number;
        textTop?: number;
        textWidth?: number;
        title?: string;
        toolboxTemplate?: any;
        toolboxWidthToHeightRatio?: number;
        type?: string;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customShapeTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customShapeToolboxTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    defaultItemPropertiesChange: EventEmitter<{
        connectorLineEnd?: string;
        connectorLineStart?: string;
        connectorLineType?: string;
        shapeMaxHeight?: number | undefined;
        shapeMaxWidth?: number | undefined;
        shapeMinHeight?: number | undefined;
        shapeMinWidth?: number | undefined;
        style?: any;
        textStyle?: any;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    edgesChange: EventEmitter<{
        customDataExpr?: Function | string | undefined;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        fromExpr?: Function | string;
        fromLineEndExpr?: Function | string | undefined;
        fromPointIndexExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        lineTypeExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        pointsExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string | undefined;
        textStyleExpr?: Function | string | undefined;
        toExpr?: Function | string;
        toLineEndExpr?: Function | string | undefined;
        toPointIndexExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    editingChange: EventEmitter<{
        allowAddShape?: boolean;
        allowChangeConnection?: boolean;
        allowChangeConnectorPoints?: boolean;
        allowChangeConnectorText?: boolean;
        allowChangeShapeText?: boolean;
        allowDeleteConnector?: boolean;
        allowDeleteShape?: boolean;
        allowMoveShape?: boolean;
        allowResizeShape?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    exportChange: EventEmitter<{
        fileName?: string;
        proxyUrl?: string | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    fullScreenChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    gridSizeChange: EventEmitter<number | {
        items?: Array<number>;
        value?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hasChangesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    historyToolbarChange: EventEmitter<{
        commands?: Array<DevExpress.ui.dxDiagramCustomCommand | string>;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    mainToolbarChange: EventEmitter<{
        commands?: Array<DevExpress.ui.dxDiagramCustomCommand | string>;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nodesChange: EventEmitter<{
        autoLayout?: string | {
            orientation?: string;
            type?: string;
        };
        autoSizeEnabled?: boolean;
        containerChildrenExpr?: Function | string | undefined;
        containerKeyExpr?: Function | string;
        customDataExpr?: Function | string | undefined;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        heightExpr?: Function | string | undefined;
        imageUrlExpr?: Function | string | undefined;
        itemsExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        leftExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        parentKeyExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string;
        textStyleExpr?: Function | string | undefined;
        topExpr?: Function | string | undefined;
        typeExpr?: Function | string;
        widthExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageColorChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageOrientationChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageSizeChange: EventEmitter<{
        height?: number;
        items?: Array<any | {
            height?: number;
            text?: string;
            width?: number;
        }>;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    propertiesPanelChange: EventEmitter<{
        tabs?: Array<any | {
            commands?: Array<DevExpress.ui.dxDiagramCustomCommand | string>;
            groups?: Array<any | {
                commands?: Array<DevExpress.ui.dxDiagramCustomCommand | string>;
                title?: string;
            }>;
            title?: string;
        }>;
        visibility?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    readOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showGridChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    simpleViewChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    snapToGridChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    toolboxChange: EventEmitter<{
        groups?: Array<any | string | {
            category?: string;
            displayMode?: string;
            expanded?: boolean;
            shapes?: Array<string>;
            title?: string;
        }>;
        shapeIconsPerRow?: number;
        showSearch?: boolean;
        visibility?: string;
        width?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    unitsChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useNativeScrollingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    viewToolbarChange: EventEmitter<{
        commands?: Array<DevExpress.ui.dxDiagramCustomCommand | string>;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    viewUnitsChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    zoomLevelChange: EventEmitter<number | {
        items?: Array<number>;
        value?: number | undefined;
    }>;
    customShapesChildren: QueryList<DxiCustomShapeComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxDiagram;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
}
export declare class DxDiagramModule {
}
