/*!
 * devextreme-angular
 * Version: 21.2.15
 * Build date: Tue Dec 12 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { NestedOptionHost } from 'devextreme-angular/core';
import { CollectionNestedOption } from 'devextreme-angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class DxiValidationRuleComponent extends CollectionNestedOption {
    message: string;
    trim: boolean;
    type: string;
    ignoreEmptyValue: boolean;
    max: Date | number;
    min: Date | number;
    reevaluate: boolean;
    validationCallback: Function;
    comparisonTarget: Function;
    comparisonType: string;
    pattern: RegExp | string;
    protected readonly _optionPath: string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxiValidationRuleComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxiValidationRuleComponent, "dxi-validation-rule", never, { "message": "message"; "trim": "trim"; "type": "type"; "ignoreEmptyValue": "ignoreEmptyValue"; "max": "max"; "min": "min"; "reevaluate": "reevaluate"; "validationCallback": "validationCallback"; "comparisonTarget": "comparisonTarget"; "comparisonType": "comparisonType"; "pattern": "pattern"; }, {}, never, never>;
}
export declare class DxiValidationRuleModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxiValidationRuleModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxiValidationRuleModule, [typeof DxiValidationRuleComponent], never, [typeof DxiValidationRuleComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxiValidationRuleModule>;
}

//# sourceMappingURL=validation-rule-dxi.d.ts.map