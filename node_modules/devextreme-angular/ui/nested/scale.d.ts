/*!
 * devextreme-angular
 * Version: 21.2.15
 * Build date: Tue Dec 12 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { Format } from 'devextreme/localization';
import { Font } from 'devextreme/viz/core/base_widget';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import { DxiBreakComponent } from './break-dxi';
import * as ɵngcc0 from '@angular/core';
export declare class DxoScaleComponent extends NestedOption implements OnDestroy, OnInit {
    allowDecimals: boolean | undefined;
    customMinorTicks: Array<number>;
    customTicks: Array<number>;
    endValue: number | Date | string | undefined;
    label: {
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        hideFirstOrLast?: string;
        indentFromTick?: number;
        overlappingBehavior?: string;
        useRangeColors?: boolean;
        visible?: boolean;
    } | {
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        indentFromTick?: number;
        overlappingBehavior?: string;
        useRangeColors?: boolean;
        visible?: boolean;
    } | {
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        overlappingBehavior?: string;
        topIndent?: number;
        visible?: boolean;
    };
    minorTick: {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    minorTickInterval: number | undefined | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    orientation: string;
    scaleDivisionFactor: number;
    startValue: number | Date | string | undefined;
    tick: {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        opacity?: number;
        width?: number;
    };
    tickInterval: number | undefined | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    horizontalOrientation: string;
    verticalOrientation: string;
    aggregateByCategory: boolean;
    aggregationGroupWidth: number | undefined;
    aggregationInterval: number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    breaks: Array<DevExpress.viz.ScaleBreak>;
    breakStyle: {
        color?: string;
        line?: string;
        width?: number;
    };
    categories: Array<number | string | Date>;
    discreteAxisDivisionMode: string;
    endOnTick: boolean;
    holidays: Array<Date | string | number>;
    linearThreshold: number;
    logarithmBase: number;
    marker: {
        label?: {
            customizeText?: Function;
            format?: Format | string | undefined;
        };
        separatorHeight?: number;
        textLeftIndent?: number;
        textTopIndent?: number;
        topIndent?: number;
        visible?: boolean;
    };
    maxRange: number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    minorTickCount: number | undefined;
    minRange: number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    placeholderHeight: number | undefined;
    showCustomBoundaryTicks: boolean;
    singleWorkdays: Array<Date | string | number>;
    type: string | undefined;
    valueType: string | undefined;
    workdaysOnly: boolean;
    workWeek: Array<number>;
    protected readonly _optionPath: string;
    breaksChildren: QueryList<DxiBreakComponent>;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxoScaleComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxoScaleComponent, "dxo-scale", never, { "allowDecimals": "allowDecimals"; "customMinorTicks": "customMinorTicks"; "customTicks": "customTicks"; "endValue": "endValue"; "label": "label"; "minorTick": "minorTick"; "minorTickInterval": "minorTickInterval"; "orientation": "orientation"; "scaleDivisionFactor": "scaleDivisionFactor"; "startValue": "startValue"; "tick": "tick"; "tickInterval": "tickInterval"; "horizontalOrientation": "horizontalOrientation"; "verticalOrientation": "verticalOrientation"; "aggregateByCategory": "aggregateByCategory"; "aggregationGroupWidth": "aggregationGroupWidth"; "aggregationInterval": "aggregationInterval"; "breaks": "breaks"; "breakStyle": "breakStyle"; "categories": "categories"; "discreteAxisDivisionMode": "discreteAxisDivisionMode"; "endOnTick": "endOnTick"; "holidays": "holidays"; "linearThreshold": "linearThreshold"; "logarithmBase": "logarithmBase"; "marker": "marker"; "maxRange": "maxRange"; "minorTickCount": "minorTickCount"; "minRange": "minRange"; "placeholderHeight": "placeholderHeight"; "showCustomBoundaryTicks": "showCustomBoundaryTicks"; "singleWorkdays": "singleWorkdays"; "type": "type"; "valueType": "valueType"; "workdaysOnly": "workdaysOnly"; "workWeek": "workWeek"; }, {}, ["breaksChildren"], never>;
}
export declare class DxoScaleModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxoScaleModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxoScaleModule, [typeof DxoScaleComponent], never, [typeof DxoScaleComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxoScaleModule>;
}

//# sourceMappingURL=scale.d.ts.map