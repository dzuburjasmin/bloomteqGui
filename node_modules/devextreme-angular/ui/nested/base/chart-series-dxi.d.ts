/*!
 * devextreme-angular
 * Version: 21.2.15
 * Build date: Tue Dec 12 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { CollectionNestedOption } from 'devextreme-angular/core';
import { Format } from 'devextreme/localization';
import { Font } from 'devextreme/viz/core/base_widget';
export declare abstract class DxiChartSeries extends CollectionNestedOption {
    aggregation: {
        calculate?: Function | undefined;
        enabled?: boolean;
        method?: string;
    };
    argumentField: string;
    axis: string | undefined;
    barOverlapGroup: string | undefined;
    barPadding: number | undefined;
    barWidth: number | undefined;
    border: {
        color?: string | undefined;
        dashStyle?: string | undefined;
        visible?: boolean;
        width?: number;
    };
    closeValueField: string;
    color: string | undefined;
    cornerRadius: number;
    dashStyle: string;
    highValueField: string;
    hoverMode: string;
    hoverStyle: {
        border?: {
            color?: string | undefined;
            dashStyle?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        dashStyle?: string;
        hatching?: {
            direction?: string;
            opacity?: number;
            step?: number;
            width?: number;
        };
        width?: number;
    } | {
        border?: {
            color?: string | undefined;
            dashStyle?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        hatching?: {
            direction?: string;
            opacity?: number;
            step?: number;
            width?: number;
        };
    };
    ignoreEmptyPoints: boolean;
    innerColor: string;
    label: {
        alignment?: string;
        argumentFormat?: Format | string | undefined;
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            dashStyle?: string;
            visible?: boolean;
            width?: number;
        };
        connector?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        horizontalOffset?: number;
        position?: string;
        rotationAngle?: number;
        showForZeroValues?: boolean;
        verticalOffset?: number;
        visible?: boolean;
    } | {
        argumentFormat?: Format | string | undefined;
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            dashStyle?: string;
            visible?: boolean;
            width?: number;
        };
        connector?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        position?: string;
        radialOffset?: number;
        rotationAngle?: number;
        textOverflow?: string;
        visible?: boolean;
        wordWrap?: string;
    } | {
        argumentFormat?: Format | string | undefined;
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            dashStyle?: string;
            visible?: boolean;
            width?: number;
        };
        connector?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        position?: string;
        rotationAngle?: number;
        showForZeroValues?: boolean;
        visible?: boolean;
    };
    lowValueField: string;
    maxLabelCount: number | undefined;
    minBarSize: number | undefined;
    name: string | undefined;
    opacity: number;
    openValueField: string;
    pane: string;
    point: {
        border?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        hoverMode?: string;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: string | undefined;
            size?: number | undefined;
        };
        image?: string | undefined | {
            height?: number | {
                rangeMaxPoint?: number | undefined;
                rangeMinPoint?: number | undefined;
            };
            url?: string | undefined | {
                rangeMaxPoint?: string | undefined;
                rangeMinPoint?: string | undefined;
            };
            width?: number | {
                rangeMaxPoint?: number | undefined;
                rangeMinPoint?: number | undefined;
            };
        };
        selectionMode?: string;
        selectionStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: string | undefined;
            size?: number | undefined;
        };
        size?: number;
        symbol?: string;
        visible?: boolean;
    } | {
        border?: {
            color?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        hoverMode?: string;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: string | undefined;
            size?: number;
        };
        image?: string | undefined | {
            height?: number;
            url?: string | undefined;
            width?: number;
        };
        selectionMode?: string;
        selectionStyle?: {
            border?: {
                color?: string | undefined;
                visible?: boolean;
                width?: number;
            };
            color?: string | undefined;
            size?: number;
        };
        size?: number;
        symbol?: string;
        visible?: boolean;
    };
    rangeValue1Field: string;
    rangeValue2Field: string;
    reduction: {
        color?: string;
        level?: string;
    };
    selectionMode: string;
    selectionStyle: {
        border?: {
            color?: string | undefined;
            dashStyle?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        dashStyle?: string;
        hatching?: {
            direction?: string;
            opacity?: number;
            step?: number;
            width?: number;
        };
        width?: number;
    } | {
        border?: {
            color?: string | undefined;
            dashStyle?: string | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string | undefined;
        hatching?: {
            direction?: string;
            opacity?: number;
            step?: number;
            width?: number;
        };
    };
    showInLegend: boolean;
    sizeField: string;
    stack: string;
    tag: any | undefined;
    tagField: string;
    type: string;
    valueErrorBar: {
        color?: string;
        displayMode?: string;
        edgeLength?: number;
        highValueField?: string | undefined;
        lineWidth?: number;
        lowValueField?: string | undefined;
        opacity?: number | undefined;
        type?: string | undefined;
        value?: number;
    };
    valueField: string;
    visible: boolean;
    width: number;
    argumentType: string | undefined;
    minSegmentSize: number | undefined;
    smallValuesGrouping: {
        groupName?: string;
        mode?: string;
        threshold?: number | undefined;
        topCount?: number | undefined;
    };
    closed: boolean;
}
