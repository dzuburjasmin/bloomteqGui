/*!
 * devextreme-angular
 * Version: 21.2.15
 * Build date: Tue Dec 12 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy, EventEmitter, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { Format } from 'devextreme/localization';
import { Font } from 'devextreme/viz/core/base_widget';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import { DxiBreakComponent } from './break-dxi';
import { DxiConstantLineComponent } from './constant-line-dxi';
import { DxiStripComponent } from './strip-dxi';
import * as ɵngcc0 from '@angular/core';
export declare class DxoArgumentAxisComponent extends NestedOption implements OnDestroy, OnInit {
    aggregateByCategory: boolean;
    aggregatedPointsPosition: string;
    aggregationGroupWidth: number | undefined;
    aggregationInterval: number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    allowDecimals: boolean | undefined;
    argumentType: string | undefined;
    axisDivisionFactor: number;
    breaks: Array<DevExpress.viz.ScaleBreak>;
    breakStyle: {
        color?: string;
        line?: string;
        width?: number;
    };
    categories: Array<number | string | Date>;
    color: string;
    constantLines: Array<any | {
        color?: string;
        dashStyle?: string;
        displayBehindSeries?: boolean;
        extendAxis?: boolean;
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            position?: string;
            text?: string | undefined;
            verticalAlignment?: string;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        value?: Date | number | string | undefined;
        width?: number;
    } | {
        color?: string;
        dashStyle?: string;
        displayBehindSeries?: boolean;
        extendAxis?: boolean;
        label?: {
            font?: Font;
            text?: string | undefined;
            visible?: boolean;
        };
        value?: Date | number | string | undefined;
        width?: number;
    }>;
    constantLineStyle: {
        color?: string;
        dashStyle?: string;
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            position?: string;
            verticalAlignment?: string;
            visible?: boolean;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        width?: number;
    } | {
        color?: string;
        dashStyle?: string;
        label?: {
            font?: Font;
            visible?: boolean;
        };
        width?: number;
    };
    customPosition: Date | number | string | undefined;
    customPositionAxis: string | undefined;
    discreteAxisDivisionMode: string;
    endOnTick: boolean | undefined;
    grid: {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    holidays: Array<Date | string | number>;
    hoverMode: string;
    inverted: boolean;
    label: {
        alignment?: string | undefined;
        customizeHint?: Function;
        customizeText?: Function;
        displayMode?: string;
        font?: Font;
        format?: Format | string | undefined;
        indentFromAxis?: number;
        overlappingBehavior?: string;
        position?: string;
        rotationAngle?: number;
        staggeringSpacing?: number;
        template?: any | undefined;
        textOverflow?: string;
        visible?: boolean;
        wordWrap?: string;
    } | {
        customizeHint?: Function;
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        indentFromAxis?: number;
        overlappingBehavior?: string;
        visible?: boolean;
    };
    linearThreshold: number | undefined;
    logarithmBase: number;
    maxValueMargin: number | undefined;
    minorGrid: {
        color?: string;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    minorTick: {
        color?: string;
        length?: number;
        opacity?: number;
        shift?: number;
        visible?: boolean;
        width?: number;
    };
    minorTickCount: number | undefined;
    minorTickInterval: number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    minValueMargin: number | undefined;
    minVisualRangeLength: number | string | undefined | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    offset: number | undefined;
    opacity: number | undefined;
    placeholderSize: number;
    position: string;
    singleWorkdays: Array<Date | string | number>;
    strips: Array<any | {
        color?: string | undefined;
        endValue?: Date | number | string | undefined;
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            text?: string | undefined;
            verticalAlignment?: string;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        startValue?: Date | number | string | undefined;
    } | {
        color?: string | undefined;
        endValue?: Date | number | string | undefined;
        label?: {
            font?: Font;
            text?: string | undefined;
        };
        startValue?: Date | number | string | undefined;
    }>;
    stripStyle: {
        label?: {
            font?: Font;
            horizontalAlignment?: string;
            verticalAlignment?: string;
        };
        paddingLeftRight?: number;
        paddingTopBottom?: number;
    } | {
        label?: {
            font?: Font;
        };
    };
    tick: {
        color?: string;
        length?: number;
        opacity?: number | undefined;
        shift?: number;
        visible?: boolean;
        width?: number;
    };
    tickInterval: number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    title: string | {
        alignment?: string;
        font?: Font;
        margin?: number;
        text?: string | undefined;
        textOverflow?: string;
        wordWrap?: string;
    };
    type: string | undefined;
    valueMarginsEnabled: boolean;
    visible: boolean;
    visualRange: DevExpress.viz.VizRange | Array<number | string | Date>;
    visualRangeUpdateMode: string;
    wholeRange: DevExpress.viz.VizRange | undefined | Array<number | string | Date>;
    width: number;
    workdaysOnly: boolean;
    workWeek: Array<number>;
    firstPointOnStartAngle: boolean;
    originValue: number | undefined;
    period: number | undefined;
    startAngle: number;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visualRangeChange: EventEmitter<DevExpress.viz.VizRange | Array<number | string | Date>>;
    protected readonly _optionPath: string;
    breaksChildren: QueryList<DxiBreakComponent>;
    constantLinesChildren: QueryList<DxiConstantLineComponent>;
    stripsChildren: QueryList<DxiStripComponent>;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxoArgumentAxisComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxoArgumentAxisComponent, "dxo-argument-axis", never, { "aggregateByCategory": "aggregateByCategory"; "aggregatedPointsPosition": "aggregatedPointsPosition"; "aggregationGroupWidth": "aggregationGroupWidth"; "aggregationInterval": "aggregationInterval"; "allowDecimals": "allowDecimals"; "argumentType": "argumentType"; "axisDivisionFactor": "axisDivisionFactor"; "breaks": "breaks"; "breakStyle": "breakStyle"; "categories": "categories"; "color": "color"; "constantLines": "constantLines"; "constantLineStyle": "constantLineStyle"; "customPosition": "customPosition"; "customPositionAxis": "customPositionAxis"; "discreteAxisDivisionMode": "discreteAxisDivisionMode"; "endOnTick": "endOnTick"; "grid": "grid"; "holidays": "holidays"; "hoverMode": "hoverMode"; "inverted": "inverted"; "label": "label"; "linearThreshold": "linearThreshold"; "logarithmBase": "logarithmBase"; "maxValueMargin": "maxValueMargin"; "minorGrid": "minorGrid"; "minorTick": "minorTick"; "minorTickCount": "minorTickCount"; "minorTickInterval": "minorTickInterval"; "minValueMargin": "minValueMargin"; "minVisualRangeLength": "minVisualRangeLength"; "offset": "offset"; "opacity": "opacity"; "placeholderSize": "placeholderSize"; "position": "position"; "singleWorkdays": "singleWorkdays"; "strips": "strips"; "stripStyle": "stripStyle"; "tick": "tick"; "tickInterval": "tickInterval"; "title": "title"; "type": "type"; "valueMarginsEnabled": "valueMarginsEnabled"; "visible": "visible"; "visualRange": "visualRange"; "visualRangeUpdateMode": "visualRangeUpdateMode"; "wholeRange": "wholeRange"; "width": "width"; "workdaysOnly": "workdaysOnly"; "workWeek": "workWeek"; "firstPointOnStartAngle": "firstPointOnStartAngle"; "originValue": "originValue"; "period": "period"; "startAngle": "startAngle"; }, { "visualRangeChange": "visualRangeChange"; }, ["breaksChildren", "constantLinesChildren", "stripsChildren"], never>;
}
export declare class DxoArgumentAxisModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxoArgumentAxisModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxoArgumentAxisModule, [typeof DxoArgumentAxisComponent], never, [typeof DxoArgumentAxisComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxoArgumentAxisModule>;
}

//# sourceMappingURL=argument-axis.d.ts.map