{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["/*!\r\n * devextreme-angular\r\n * Version: 21.2.15\r\n * Build date: Tue Dec 12 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';\r\nexport { ExplicitTypes } from 'devextreme/ui/nav_bar';\r\nimport DevExpress from 'devextreme/bundles/dx.all';\r\nimport Store from 'devextreme/data/abstract_store';\r\nimport DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';\r\nimport DxNavBar from 'devextreme/ui/nav_bar';\r\nimport { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';\r\nimport { DxiItemComponent } from 'devextreme-angular/ui/nested';\r\n/**\r\n * The NavBar is a UI component that navigates the application views.\r\n\r\n */\r\nexport declare class DxNavBarComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {\r\n    private _watcherHelper;\r\n    private _idh;\r\n    instance: DxNavBar;\r\n    /**\r\n     * Specifies the shortcut key that sets focus on the UI component.\r\n    \r\n     */\r\n    accessKey: string | undefined;\r\n    /**\r\n     * Binds the UI component to data.\r\n    \r\n     */\r\n    dataSource: DataSource | DataSourceOptions | Store | null | string | Array<string | DevExpress.ui.dxTabsItem | any>;\r\n    /**\r\n     * Specifies whether the UI component responds to user interaction.\r\n    \r\n     */\r\n    disabled: boolean;\r\n    /**\r\n     * Specifies the global attributes to be attached to the UI component&apos;s container element.\r\n    \r\n     */\r\n    elementAttr: any;\r\n    /**\r\n     * Specifies whether the UI component can be focused using keyboard navigation.\r\n    \r\n     */\r\n    focusStateEnabled: boolean;\r\n    /**\r\n     * Specifies the UI component&apos;s height.\r\n    \r\n     */\r\n    height: number | Function | string | undefined;\r\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the UI component.\r\n    \r\n     */\r\n    hint: string | undefined;\r\n    /**\r\n     * Specifies whether the UI component changes its state when a user pauses on it.\r\n    \r\n     */\r\n    hoverStateEnabled: boolean;\r\n    /**\r\n     * The time period in milliseconds before the onItemHold event is raised.\r\n    \r\n     */\r\n    itemHoldTimeout: number;\r\n    /**\r\n     * An array of items displayed by the UI component.\r\n    \r\n     */\r\n    items: Array<string | any | {\r\n        badge?: string;\r\n        disabled?: boolean;\r\n        html?: string;\r\n        icon?: string;\r\n        template?: any;\r\n        text?: string;\r\n        visible?: boolean;\r\n    }>;\r\n    /**\r\n     * Specifies a custom template for items.\r\n    \r\n     */\r\n    itemTemplate: any;\r\n    /**\r\n     * Specifies the key property that provides key values to access data items. Each key value must be unique.\r\n    \r\n     */\r\n    keyExpr: Function | string;\r\n    /**\r\n     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.\r\n    \r\n     */\r\n    noDataText: string;\r\n    /**\r\n     * Specifies whether to repaint only those elements whose data changed.\r\n    \r\n     */\r\n    repaintChangesOnly: boolean;\r\n    /**\r\n     * Switches the UI component to a right-to-left representation.\r\n    \r\n     */\r\n    rtlEnabled: boolean;\r\n    /**\r\n     * Specifies whether or not an end-user can scroll tabs by swiping.\r\n    \r\n     */\r\n    scrollByContent: boolean;\r\n    /**\r\n     * The index of the currently selected UI component item.\r\n    \r\n     */\r\n    selectedIndex: number;\r\n    /**\r\n     * The selected item object.\r\n    \r\n     */\r\n    selectedItem: any;\r\n    /**\r\n     * Specifies an array of currently selected item keys.\r\n    \r\n     */\r\n    selectedItemKeys: Array<any>;\r\n    /**\r\n     * An array of currently selected item objects.\r\n    \r\n     */\r\n    selectedItems: Array<any>;\r\n    /**\r\n     * Specifies whether the UI component enables an end-user to select only a single item or multiple items.\r\n    \r\n     */\r\n    selectionMode: string;\r\n    /**\r\n     * Specifies the number of the element when the Tab key is used for navigating.\r\n    \r\n     */\r\n    tabIndex: number;\r\n    /**\r\n     * Specifies whether the UI component is visible.\r\n    \r\n     */\r\n    visible: boolean;\r\n    /**\r\n     * Specifies the UI component&apos;s width.\r\n    \r\n     */\r\n    width: number | Function | string | undefined;\r\n    /**\r\n    \r\n     * A function that is executed when the UI component is rendered and each time the component is repainted.\r\n    \r\n    \r\n     */\r\n    onContentReady: EventEmitter<any>;\r\n    /**\r\n    \r\n     * A function that is executed before the UI component is disposed of.\r\n    \r\n    \r\n     */\r\n    onDisposing: EventEmitter<any>;\r\n    /**\r\n    \r\n     * A function used in JavaScript frameworks to save the UI component instance.\r\n    \r\n    \r\n     */\r\n    onInitialized: EventEmitter<any>;\r\n    /**\r\n    \r\n     * A function that is executed when a collection item is clicked or tapped.\r\n    \r\n    \r\n     */\r\n    onItemClick: EventEmitter<any>;\r\n    /**\r\n    \r\n     * A function that is executed when a collection item is right-clicked or pressed.\r\n    \r\n    \r\n     */\r\n    onItemContextMenu: EventEmitter<any>;\r\n    /**\r\n    \r\n     * A function that is executed when a collection item has been held for a specified period.\r\n    \r\n    \r\n     */\r\n    onItemHold: EventEmitter<any>;\r\n    /**\r\n    \r\n     * A function that is executed after a collection item is rendered.\r\n    \r\n    \r\n     */\r\n    onItemRendered: EventEmitter<any>;\r\n    /**\r\n    \r\n     * A function that is executed after a UI component property is changed.\r\n    \r\n    \r\n     */\r\n    onOptionChanged: EventEmitter<any>;\r\n    /**\r\n    \r\n     * A function that is executed when a collection item is selected or selection is canceled.\r\n    \r\n    \r\n     */\r\n    onSelectionChanged: EventEmitter<any>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    accessKeyChange: EventEmitter<string | undefined>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    dataSourceChange: EventEmitter<DataSource | DataSourceOptions | Store | null | string | Array<string | DevExpress.ui.dxTabsItem | any>>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    disabledChange: EventEmitter<boolean>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    elementAttrChange: EventEmitter<any>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    focusStateEnabledChange: EventEmitter<boolean>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    heightChange: EventEmitter<number | Function | string | undefined>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    hintChange: EventEmitter<string | undefined>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    hoverStateEnabledChange: EventEmitter<boolean>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    itemHoldTimeoutChange: EventEmitter<number>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    itemsChange: EventEmitter<Array<string | any | {\r\n        badge?: string;\r\n        disabled?: boolean;\r\n        html?: string;\r\n        icon?: string;\r\n        template?: any;\r\n        text?: string;\r\n        visible?: boolean;\r\n    }>>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    itemTemplateChange: EventEmitter<any>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    keyExprChange: EventEmitter<Function | string>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    noDataTextChange: EventEmitter<string>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    repaintChangesOnlyChange: EventEmitter<boolean>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    rtlEnabledChange: EventEmitter<boolean>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    scrollByContentChange: EventEmitter<boolean>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    selectedIndexChange: EventEmitter<number>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    selectedItemChange: EventEmitter<any>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    selectedItemKeysChange: EventEmitter<Array<any>>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    selectedItemsChange: EventEmitter<Array<any>>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    selectionModeChange: EventEmitter<string>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    tabIndexChange: EventEmitter<number>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    visibleChange: EventEmitter<boolean>;\r\n    /**\r\n    \r\n     * This member supports the internal infrastructure and is not intended to be used directly from your code.\r\n    \r\n     */\r\n    widthChange: EventEmitter<number | Function | string | undefined>;\r\n    itemsChildren: QueryList<DxiItemComponent>;\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);\r\n    protected _createInstance(element: any, options: any): DxNavBar<any, any>;\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    setupChanges(prop: string, changes: SimpleChanges): void;\r\n    ngDoCheck(): void;\r\n    _setOption(name: string, value: any): void;\r\n}\r\nexport declare class DxNavBarModule {\r\n}\r\n"]}