/*!
 * devextreme-angular
 * Version: 21.2.15
 * Build date: Tue Dec 12 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export { ExplicitTypes } from 'devextreme/ui/tree_view';
import DevExpress from 'devextreme/bundles/dx.all';
import Store from 'devextreme/data/abstract_store';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { Properties as dxTextBoxOptions } from 'devextreme/ui/text_box';
import DxTreeView from 'devextreme/ui/tree_view';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
/**
 * The TreeView UI component is a tree-like representation of textual data.

 */
export declare class DxTreeViewComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxTreeView;
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    accessKey: string | undefined;
    /**
     * Specifies whether the UI component changes its state as a result of user interaction.
    
     */
    activeStateEnabled: boolean;
    /**
     * Specifies whether or not to animate item collapsing and expanding.
    
     */
    animationEnabled: boolean;
    /**
     * Allows you to load nodes on demand.
    
     */
    createChildren: Function;
    /**
     * Binds the UI component to data.
    
     */
    dataSource: DataSource | DataSourceOptions | Store | null | string | Array<DevExpress.ui.dxTreeViewItem>;
    /**
     * Notifies the UI component of the used data structure.
    
     */
    dataStructure: string;
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    disabled: boolean;
    /**
     * Specifies the name of the data source item field whose value defines whether or not the corresponding UI component item is disabled.
    
     */
    disabledExpr: Function | string;
    /**
     * Specifies the data field whose values should be displayed.
    
     */
    displayExpr: Function | string;
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    elementAttr: any;
    /**
     * Specifies whether or not a user can expand all tree view items by the &apos;*&apos; hot key.
    
     */
    expandAllEnabled: boolean;
    /**
     * Specifies which data source field specifies whether an item is expanded.
    
     */
    expandedExpr: Function | string;
    /**
     * Specifies the event on which to expand/collapse a node.
    
     */
    expandEvent: string;
    /**
     * Specifies whether or not all parent nodes of an initially expanded node are displayed expanded.
    
     */
    expandNodesRecursive: boolean;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
    
     */
    focusStateEnabled: boolean;
    /**
     * Specifies the name of the data source item field whose value defines whether or not the corresponding node includes child nodes.
    
     */
    hasItemsExpr: Function | string;
    /**
     * Specifies the UI component&apos;s height.
    
     */
    height: number | Function | string | undefined;
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    hint: string | undefined;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    hoverStateEnabled: boolean;
    /**
     * The time period in milliseconds before the onItemHold event is raised.
    
     */
    itemHoldTimeout: number;
    /**
     * An array of items displayed by the UI component.
    
     */
    items: Array<DevExpress.ui.dxTreeViewItem>;
    /**
     * Specifies which data field contains nested items.
    
     */
    itemsExpr: Function | string;
    /**
     * Specifies a custom template for items.
    
     */
    itemTemplate: any;
    /**
     * Specifies which data field provides keys for TreeView items.
    
     */
    keyExpr: Function | string;
    /**
     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.
    
     */
    noDataText: string;
    /**
     * Specifies the name of the data source item field for holding the parent key of the corresponding node.
    
     */
    parentIdExpr: Function | string;
    /**
     * Specifies the parent ID value of the root item.
    
     */
    rootValue: any;
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    rtlEnabled: boolean;
    /**
     * A string value specifying available scrolling directions.
    
     */
    scrollDirection: string;
    /**
     * Configures the search panel.
    
     */
    searchEditorOptions: dxTextBoxOptions;
    /**
     * Specifies whether the search panel is visible.
    
     */
    searchEnabled: boolean;
    /**
     * Specifies a data object&apos;s field name or an expression whose value is compared to the search string.
    
     */
    searchExpr: Function | string | Array<Function | string>;
    /**
     * Specifies a comparison operation used to search UI component items.
    
     */
    searchMode: string;
    /**
     * Specifies a delay in milliseconds between when a user finishes typing, and the search is executed.
    
     */
    searchTimeout: number | undefined;
    /**
     * Specifies the current search string.
    
     */
    searchValue: string;
    /**
     * Specifies the text displayed at the &apos;Select All&apos; check box.
    
     */
    selectAllText: string;
    /**
     * Specifies whether an item becomes selected if a user clicks it.
    
     */
    selectByClick: boolean;
    /**
     * Specifies the name of the data source item field whose value defines whether or not the corresponding UI component items is selected.
    
     */
    selectedExpr: Function | string;
    /**
     * Specifies item selection mode. Applies only if selection is enabled.
    
     */
    selectionMode: string;
    /**
     * Specifies whether all child nodes should be selected when their parent node is selected. Applies only if the selectionMode is &apos;multiple&apos;.
    
     */
    selectNodesRecursive: boolean;
    /**
     * Specifies the checkbox display mode.
    
     */
    showCheckBoxesMode: string;
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    tabIndex: number;
    /**
     * Specifies whether or not the UI component uses native scrolling.
    
     */
    useNativeScrolling: boolean;
    /**
     * Enables the virtual mode in which nodes are loaded on demand. Use it to enhance the performance on large datasets.
    
     */
    virtualModeEnabled: boolean;
    /**
     * Specifies whether the UI component is visible.
    
     */
    visible: boolean;
    /**
     * Specifies the UI component&apos;s width.
    
     */
    width: number | Function | string | undefined;
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed when a collection item is clicked or tapped.
    
    
     */
    onItemClick: EventEmitter<any>;
    /**
    
     * A function that is executed when a tree view item is collapsed.
    
    
     */
    onItemCollapsed: EventEmitter<any>;
    /**
    
     * A function that is executed when a collection item is right-clicked or pressed.
    
    
     */
    onItemContextMenu: EventEmitter<any>;
    /**
    
     * A function that is executed when a tree view item is expanded.
    
    
     */
    onItemExpanded: EventEmitter<any>;
    /**
    
     * A function that is executed when a collection item has been held for a specified period.
    
    
     */
    onItemHold: EventEmitter<any>;
    /**
    
     * A function that is executed after a collection item is rendered.
    
    
     */
    onItemRendered: EventEmitter<any>;
    /**
    
     * A function that is executed when a single TreeView item is selected or selection is canceled.
    
    
     */
    onItemSelectionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed when the &apos;Select All&apos; check box value is changed. Applies only if showCheckBoxesMode is &apos;selectAll&apos; and selectionMode is &apos;multiple&apos;.
    
    
     */
    onSelectAllValueChanged: EventEmitter<any>;
    /**
    
     * A function that is executed when a TreeView item is selected or selection is canceled.
    
    
     */
    onSelectionChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    createChildrenChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DataSource | DataSourceOptions | Store | null | string | Array<DevExpress.ui.dxTreeViewItem>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataStructureChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    displayExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    expandAllEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    expandedExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    expandEventChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    expandNodesRecursiveChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hasItemsExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemHoldTimeoutChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<DevExpress.ui.dxTreeViewItem>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    keyExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    noDataTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    parentIdExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rootValueChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollDirectionChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchEditorOptionsChange: EventEmitter<dxTextBoxOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchExprChange: EventEmitter<Function | string | Array<Function | string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchTimeoutChange: EventEmitter<number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchValueChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectAllTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectByClickChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectionModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectNodesRecursiveChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showCheckBoxesModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useNativeScrollingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    virtualModeEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    itemsChildren: QueryList<DxiItemComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxTreeView<any>;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxTreeViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxTreeViewComponent, "dx-tree-view", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "animationEnabled": "animationEnabled"; "createChildren": "createChildren"; "dataSource": "dataSource"; "dataStructure": "dataStructure"; "disabled": "disabled"; "disabledExpr": "disabledExpr"; "displayExpr": "displayExpr"; "elementAttr": "elementAttr"; "expandAllEnabled": "expandAllEnabled"; "expandedExpr": "expandedExpr"; "expandEvent": "expandEvent"; "expandNodesRecursive": "expandNodesRecursive"; "focusStateEnabled": "focusStateEnabled"; "hasItemsExpr": "hasItemsExpr"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "itemHoldTimeout": "itemHoldTimeout"; "items": "items"; "itemsExpr": "itemsExpr"; "itemTemplate": "itemTemplate"; "keyExpr": "keyExpr"; "noDataText": "noDataText"; "parentIdExpr": "parentIdExpr"; "rootValue": "rootValue"; "rtlEnabled": "rtlEnabled"; "scrollDirection": "scrollDirection"; "searchEditorOptions": "searchEditorOptions"; "searchEnabled": "searchEnabled"; "searchExpr": "searchExpr"; "searchMode": "searchMode"; "searchTimeout": "searchTimeout"; "searchValue": "searchValue"; "selectAllText": "selectAllText"; "selectByClick": "selectByClick"; "selectedExpr": "selectedExpr"; "selectionMode": "selectionMode"; "selectNodesRecursive": "selectNodesRecursive"; "showCheckBoxesMode": "showCheckBoxesMode"; "tabIndex": "tabIndex"; "useNativeScrolling": "useNativeScrolling"; "virtualModeEnabled": "virtualModeEnabled"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onItemClick": "onItemClick"; "onItemCollapsed": "onItemCollapsed"; "onItemContextMenu": "onItemContextMenu"; "onItemExpanded": "onItemExpanded"; "onItemHold": "onItemHold"; "onItemRendered": "onItemRendered"; "onItemSelectionChanged": "onItemSelectionChanged"; "onOptionChanged": "onOptionChanged"; "onSelectAllValueChanged": "onSelectAllValueChanged"; "onSelectionChanged": "onSelectionChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "animationEnabledChange": "animationEnabledChange"; "createChildrenChange": "createChildrenChange"; "dataSourceChange": "dataSourceChange"; "dataStructureChange": "dataStructureChange"; "disabledChange": "disabledChange"; "disabledExprChange": "disabledExprChange"; "displayExprChange": "displayExprChange"; "elementAttrChange": "elementAttrChange"; "expandAllEnabledChange": "expandAllEnabledChange"; "expandedExprChange": "expandedExprChange"; "expandEventChange": "expandEventChange"; "expandNodesRecursiveChange": "expandNodesRecursiveChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "hasItemsExprChange": "hasItemsExprChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "itemHoldTimeoutChange": "itemHoldTimeoutChange"; "itemsChange": "itemsChange"; "itemsExprChange": "itemsExprChange"; "itemTemplateChange": "itemTemplateChange"; "keyExprChange": "keyExprChange"; "noDataTextChange": "noDataTextChange"; "parentIdExprChange": "parentIdExprChange"; "rootValueChange": "rootValueChange"; "rtlEnabledChange": "rtlEnabledChange"; "scrollDirectionChange": "scrollDirectionChange"; "searchEditorOptionsChange": "searchEditorOptionsChange"; "searchEnabledChange": "searchEnabledChange"; "searchExprChange": "searchExprChange"; "searchModeChange": "searchModeChange"; "searchTimeoutChange": "searchTimeoutChange"; "searchValueChange": "searchValueChange"; "selectAllTextChange": "selectAllTextChange"; "selectByClickChange": "selectByClickChange"; "selectedExprChange": "selectedExprChange"; "selectionModeChange": "selectionModeChange"; "selectNodesRecursiveChange": "selectNodesRecursiveChange"; "showCheckBoxesModeChange": "showCheckBoxesModeChange"; "tabIndexChange": "tabIndexChange"; "useNativeScrollingChange": "useNativeScrollingChange"; "virtualModeEnabledChange": "virtualModeEnabledChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["itemsChildren"], never>;
}
export declare class DxTreeViewModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxTreeViewModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxTreeViewModule, [typeof DxTreeViewComponent], [typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxoSearchEditorOptionsModule, typeof ɵngcc1.DxiButtonModule, typeof ɵngcc1.DxoOptionsModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxTreeViewComponent, typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxoSearchEditorOptionsModule, typeof ɵngcc1.DxiButtonModule, typeof ɵngcc1.DxoOptionsModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxTreeViewModule>;
}

//# sourceMappingURL=index.d.ts.map