/*!
 * devextreme-angular
 * Version: 21.2.15
 * Build date: Tue Dec 12 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export { ExplicitTypes } from 'devextreme/ui/accordion';
import DevExpress from 'devextreme/bundles/dx.all';
import Store from 'devextreme/data/abstract_store';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import DxAccordion from 'devextreme/ui/accordion';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
/**
 * The Accordion UI component contains several panels displayed one under another. These panels can be collapsed or expanded by an end user, which makes this UI component very useful for presenting information in a limited amount of space.

 */
export declare class DxAccordionComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxAccordion;
    /**
     * Specifies the shortcut key that sets focus on the UI component.
    
     */
    accessKey: string | undefined;
    /**
     * Specifies whether the UI component changes its state as a result of user interaction.
    
     */
    activeStateEnabled: boolean;
    /**
     * A number specifying the time in milliseconds spent on the animation of the expanding or collapsing of a panel.
    
     */
    animationDuration: number;
    /**
     * Specifies whether all items can be collapsed or whether at least one item must always be expanded.
    
     */
    collapsible: boolean;
    /**
     * Binds the UI component to data.
    
     */
    dataSource: DataSource | DataSourceOptions | Store | null | string | Array<string | DevExpress.ui.dxAccordionItem | any>;
    /**
     * Specifies whether to render the panel&apos;s content when it is displayed. If false, the content is rendered immediately.
    
     */
    deferRendering: boolean;
    /**
     * Specifies whether the UI component responds to user interaction.
    
     */
    disabled: boolean;
    /**
     * Specifies the global attributes to be attached to the UI component&apos;s container element.
    
     */
    elementAttr: any;
    /**
     * Specifies whether the UI component can be focused using keyboard navigation.
    
     */
    focusStateEnabled: boolean;
    /**
     * Specifies the UI component&apos;s height.
    
     */
    height: number | Function | string | undefined;
    /**
     * Specifies text for a hint that appears when a user pauses on the UI component.
    
     */
    hint: string | undefined;
    /**
     * Specifies whether the UI component changes its state when a user pauses on it.
    
     */
    hoverStateEnabled: boolean;
    /**
     * The time period in milliseconds before the onItemHold event is raised.
    
     */
    itemHoldTimeout: number;
    /**
     * An array of items displayed by the UI component.
    
     */
    items: Array<string | any | {
        disabled?: boolean;
        html?: string;
        icon?: string;
        template?: any;
        text?: string;
        title?: string;
        visible?: boolean;
    }>;
    /**
     * Specifies a custom template for items.
    
     */
    itemTemplate: any;
    /**
     * Specifies a custom template for item titles.
    
     */
    itemTitleTemplate: any;
    /**
     * Specifies the key property that provides key values to access data items. Each key value must be unique.
    
     */
    keyExpr: Function | string;
    /**
     * Specifies whether the UI component can expand several items or only a single item at once.
    
     */
    multiple: boolean;
    /**
     * Specifies the text or HTML markup displayed by the UI component if the item collection is empty.
    
     */
    noDataText: string;
    /**
     * Specifies whether to repaint only those elements whose data changed.
    
     */
    repaintChangesOnly: boolean;
    /**
     * Switches the UI component to a right-to-left representation.
    
     */
    rtlEnabled: boolean;
    /**
     * The index number of the currently expanded item.
    
     */
    selectedIndex: number;
    /**
     * The selected item object.
    
     */
    selectedItem: any;
    /**
     * Specifies an array of currently selected item keys.
    
     */
    selectedItemKeys: Array<any>;
    /**
     * An array of currently selected item objects.
    
     */
    selectedItems: Array<any>;
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
    
     */
    tabIndex: number;
    /**
     * Specifies whether the UI component is visible.
    
     */
    visible: boolean;
    /**
     * Specifies the UI component&apos;s width.
    
     */
    width: number | Function | string | undefined;
    /**
    
     * A function that is executed when the UI component is rendered and each time the component is repainted.
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * A function that is executed before the UI component is disposed of.
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * A function used in JavaScript frameworks to save the UI component instance.
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * A function that is executed when a collection item is clicked or tapped.
    
    
     */
    onItemClick: EventEmitter<any>;
    /**
    
     * A function that is executed when a collection item is right-clicked or pressed.
    
    
     */
    onItemContextMenu: EventEmitter<any>;
    /**
    
     * A function that is executed when a collection item has been held for a specified period.
    
    
     */
    onItemHold: EventEmitter<any>;
    /**
    
     * A function that is executed after a collection item is rendered.
    
    
     */
    onItemRendered: EventEmitter<any>;
    /**
    
     * A function that is executed when an accordion item&apos;s title is clicked or tapped.
    
    
     */
    onItemTitleClick: EventEmitter<any>;
    /**
    
     * A function that is executed after a UI component property is changed.
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * A function that is executed when a collection item is selected or selection is canceled.
    
    
     */
    onSelectionChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationDurationChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    collapsibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DataSource | DataSourceOptions | Store | null | string | Array<string | DevExpress.ui.dxAccordionItem | any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    deferRenderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemHoldTimeoutChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<string | any | {
        disabled?: boolean;
        html?: string;
        icon?: string;
        template?: any;
        text?: string;
        title?: string;
        visible?: boolean;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTitleTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    keyExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    multipleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    noDataTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    repaintChangesOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemKeysChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemsChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    itemsChildren: QueryList<DxiItemComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxAccordion<any, any>;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxAccordionComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxAccordionComponent, "dx-accordion", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "animationDuration": "animationDuration"; "collapsible": "collapsible"; "dataSource": "dataSource"; "deferRendering": "deferRendering"; "disabled": "disabled"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "itemHoldTimeout": "itemHoldTimeout"; "items": "items"; "itemTemplate": "itemTemplate"; "itemTitleTemplate": "itemTitleTemplate"; "keyExpr": "keyExpr"; "multiple": "multiple"; "noDataText": "noDataText"; "repaintChangesOnly": "repaintChangesOnly"; "rtlEnabled": "rtlEnabled"; "selectedIndex": "selectedIndex"; "selectedItem": "selectedItem"; "selectedItemKeys": "selectedItemKeys"; "selectedItems": "selectedItems"; "tabIndex": "tabIndex"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onItemClick": "onItemClick"; "onItemContextMenu": "onItemContextMenu"; "onItemHold": "onItemHold"; "onItemRendered": "onItemRendered"; "onItemTitleClick": "onItemTitleClick"; "onOptionChanged": "onOptionChanged"; "onSelectionChanged": "onSelectionChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "animationDurationChange": "animationDurationChange"; "collapsibleChange": "collapsibleChange"; "dataSourceChange": "dataSourceChange"; "deferRenderingChange": "deferRenderingChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "itemHoldTimeoutChange": "itemHoldTimeoutChange"; "itemsChange": "itemsChange"; "itemTemplateChange": "itemTemplateChange"; "itemTitleTemplateChange": "itemTitleTemplateChange"; "keyExprChange": "keyExprChange"; "multipleChange": "multipleChange"; "noDataTextChange": "noDataTextChange"; "repaintChangesOnlyChange": "repaintChangesOnlyChange"; "rtlEnabledChange": "rtlEnabledChange"; "selectedIndexChange": "selectedIndexChange"; "selectedItemChange": "selectedItemChange"; "selectedItemKeysChange": "selectedItemKeysChange"; "selectedItemsChange": "selectedItemsChange"; "tabIndexChange": "tabIndexChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["itemsChildren"], never>;
}
export declare class DxAccordionModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxAccordionModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxAccordionModule, [typeof DxAccordionComponent], [typeof ɵngcc1.DxiItemModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxAccordionComponent, typeof ɵngcc1.DxiItemModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxAccordionModule>;
}

//# sourceMappingURL=index.d.ts.map